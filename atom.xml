<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>紫气楠楠</title>
  <icon>https://www.gravatar.com/avatar/7124a429c575994ec398d35a1de49b3d</icon>
  <subtitle>记录点滴，分享世界</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-06-19T03:26:31.537Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Lval</name>
    <email>m1921219654@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vue项目中使用md5加密</title>
    <link href="http://yoursite.com/2019/06/19/19-06/19-6-19/"/>
    <id>http://yoursite.com/2019/06/19/19-06/19-6-19/</id>
    <published>2019-06-19T02:01:03.000Z</published>
    <updated>2019-06-19T03:26:31.537Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><code>npm install --save js-md5</code></p><h3 id="组件内引入"><a href="#组件内引入" class="headerlink" title="组件内引入"></a>组件内引入</h3><p>需要的组件内引用<br><code>import md5 from &#39;js-md5&#39;;</code><br>使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let psd = &apos;123123&apos;</span><br><span class="line">md5(psd)  // 4297f44b13955235245b2497399d7a93</span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="全局引入"><a href="#全局引入" class="headerlink" title="全局引入"></a>全局引入</h3><p>在main.js中将md5注入到vue原型上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import md5 from &apos;js-md5&apos;;</span><br><span class="line"></span><br><span class="line">Vue.prototype.$md5 = md5;</span><br></pre></td></tr></table></figure><p>使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let psd = &apos;123123&apos;</span><br><span class="line">this.$md5(psd) // 4297f44b13955235245b2497399d7a93</span><br></pre></td></tr></table></figure></p><p>例：密码：用户密码md5加密后的字符串+openid 再次经过MD5加密后的字符串<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">data()&#123;</span><br><span class="line">    return:&#123;</span><br><span class="line">        psd:&apos;123123&apos;,</span><br><span class="line">        openid:&apos;123456&apos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods:&#123;</span><br><span class="line">    addpsd:&#123;</span><br><span class="line">        let psd = this.$md5(this.psd)+this.openid //先将用户密码进行md5加密，再拼接上openid得到一个字符串</span><br><span class="line">        let mdpsd = this.$md5(psd) //将上面的字符串再进行一次md5加密</span><br><span class="line">        console.log(mdpsd)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h3&gt;&lt;p&gt;&lt;code&gt;npm install --save js-md5&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;组件内引入&quot;&gt;&lt;a href=&quot;#组件内引入&quot; class=&quot;headerlink&quot; title=&quot;组件内引入&quot;&gt;&lt;/a&gt;组件内引入&lt;/h3&gt;&lt;p&gt;需要的组件内引用&lt;br&gt;&lt;code&gt;import md5 from &amp;#39;js-md5&amp;#39;;&lt;/code&gt;&lt;br&gt;使用&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;let psd = &amp;apos;123123&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;md5(psd)  // 4297f44b13955235245b2497399d7a93&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>小程序canvas绘制图片并保存</title>
    <link href="http://yoursite.com/2019/06/18/19-06/19-6-18/"/>
    <id>http://yoursite.com/2019/06/18/19-06/19-6-18/</id>
    <published>2019-06-18T02:01:03.000Z</published>
    <updated>2019-06-19T03:29:23.313Z</updated>
    
    <content type="html"><![CDATA[<h3 id="准备画布"><a href="#准备画布" class="headerlink" title="准备画布"></a>准备画布</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;canvas style=&quot;width: 300px; height: 369px;&quot; canvas-id=&apos;myCanvas&apos;&gt;&lt;/canvas&gt;</span><br></pre></td></tr></table></figure><h3 id="建立canvas绘图的上下文对象"><a href="#建立canvas绘图的上下文对象" class="headerlink" title="建立canvas绘图的上下文对象"></a>建立canvas绘图的上下文对象</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const ctx = wx.createCanvasContext(&apos;myCanvas&apos;)</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="绘制"><a href="#绘制" class="headerlink" title="绘制"></a>绘制</h3><p>先绘制一个和画布等同大小的白色矩形作为底图<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ctx.setFillStyle(&apos;#fff&apos;) //设置填充色</span><br><span class="line">ctx.fillRect(0, 0, this.shiftSize(300), this.shiftSize(369))</span><br><span class="line">ctx.draw()</span><br><span class="line">ctx.save()//保存当前的绘图上下文。</span><br><span class="line">ctx.beginPath()//开始创建一个路径</span><br></pre></td></tr></table></figure></p><p>绘制文字<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ctx.setFillStyle(&apos;#EB4E3F&apos;)</span><br><span class="line">ctx.setFontSize(this.shiftSize(12))</span><br><span class="line">ctx.fillText(&apos;啦啦啦&apos;, this.shiftSize(15), this.shiftSize(325))</span><br><span class="line">ctx.draw(true)//参数为 true，则保留当前画布上的内容,否则画布前面的内容会被清空</span><br></pre></td></tr></table></figure></p><p>绘制图片并裁剪为圆形<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ctx.arc(this.shiftSize(40), this.shiftSize(35), this.shiftSize(25), 0, 2 * Math.PI)//画一个圆形裁剪区域</span><br><span class="line">ctx.setStrokeStyle(&apos;#999&apos;)</span><br><span class="line">ctx.stroke()</span><br><span class="line">ctx.clip()//裁剪</span><br><span class="line">ctx.drawImage(this.data.goodsInfo.img_url, this.shiftSize(15), this.shiftSize(10), this.shiftSize(50), this.shiftSize(50))//绘制图片</span><br><span class="line">ctx.restore()//恢复之前保存的绘图上下文</span><br><span class="line">ctx.draw(true)//绘制到canvas</span><br></pre></td></tr></table></figure></p><p>注：canvas画布的默认单位是px，所以我们需要换算一下单位<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">shiftSize: function (w) &#123;</span><br><span class="line">    if (this.data.windowV) &#123;</span><br><span class="line">      return w / this.data.windowV;</span><br><span class="line">    &#125;</span><br><span class="line">    return w;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></p><h3 id="保存绘制的图片到相册"><a href="#保存绘制的图片到相册" class="headerlink" title="保存绘制的图片到相册"></a>保存绘制的图片到相册</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">saveCanvasImg()&#123;</span><br><span class="line">    wx.canvasToTempFilePath(&#123;//把当前画布指定区域的内容导出生成指定大小的图片</span><br><span class="line">      canvasId: &apos;myCanvas&apos;,</span><br><span class="line">      success(res) &#123;</span><br><span class="line">        wx.authorize(&#123;//向用户发起授权请求</span><br><span class="line">          scope: &apos;scope.writePhotosAlbum&apos;,//保存相册授权</span><br><span class="line">          success:()=&gt;&#123;</span><br><span class="line">            wx.saveImageToPhotosAlbum(&#123;//保存图片到系统相册</span><br><span class="line">              filePath: res.tempFilePath,</span><br><span class="line">              success:()=&gt;&#123;</span><br><span class="line">                wx.showToast(&#123;</span><br><span class="line">                  title: &apos;图片保存成功&apos;</span><br><span class="line">                &#125;)</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;准备画布&quot;&gt;&lt;a href=&quot;#准备画布&quot; class=&quot;headerlink&quot; title=&quot;准备画布&quot;&gt;&lt;/a&gt;准备画布&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;canvas style=&amp;quot;width: 300px; height: 369px;&amp;quot; canvas-id=&amp;apos;myCanvas&amp;apos;&amp;gt;&amp;lt;/canvas&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;建立canvas绘图的上下文对象&quot;&gt;&lt;a href=&quot;#建立canvas绘图的上下文对象&quot; class=&quot;headerlink&quot; title=&quot;建立canvas绘图的上下文对象&quot;&gt;&lt;/a&gt;建立canvas绘图的上下文对象&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;const ctx = wx.createCanvasContext(&amp;apos;myCanvas&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="canvas" scheme="http://yoursite.com/categories/canvas/"/>
    
    
      <category term="canvas" scheme="http://yoursite.com/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>vue监听移动端软件键盘搜索（enter）事件</title>
    <link href="http://yoursite.com/2019/06/17/19-10/04/"/>
    <id>http://yoursite.com/2019/06/17/19-10/04/</id>
    <published>2019-06-17T02:01:03.000Z</published>
    <updated>2019-10-09T07:59:33.966Z</updated>
    
    <content type="html"><![CDATA[<h3 id="vue监听移动端软键盘搜索事件"><a href="#vue监听移动端软键盘搜索事件" class="headerlink" title="vue监听移动端软键盘搜索事件"></a>vue监听移动端软键盘搜索事件</h3><p>vue中监听手机键盘的【完成】或【搜索】按钮触发事件，需要两个条件<br>1.form表单，输入框<br><a href="mailto:2.@keyup.13" target="_blank" rel="noopener">2.@keyup.13</a> 事件 或者 直接@keyup 然后事件的处理函数里判断 event.keyCode === 13<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot; @keyup.13 = &quot;handleKeyUp&quot; placeholder=&quot;请输入用户手机号&quot; v-model=&quot;inputValue&quot;&gt;</span><br><span class="line"></span><br><span class="line">methods:&#123;</span><br><span class="line"></span><br><span class="line">handleKeyUp()&#123;</span><br><span class="line">               alert(&apos;搜索触发&apos;)</span><br><span class="line">     &#125;,</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;vue监听移动端软键盘搜索事件&quot;&gt;&lt;a href=&quot;#vue监听移动端软键盘搜索事件&quot; class=&quot;headerlink&quot; title=&quot;vue监听移动端软键盘搜索事件&quot;&gt;&lt;/a&gt;vue监听移动端软键盘搜索事件&lt;/h3&gt;&lt;p&gt;vue中监听手机键盘的【完成】或【搜
      
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>小程序接入微信支付</title>
    <link href="http://yoursite.com/2019/06/17/19-10/wechat_pay/"/>
    <id>http://yoursite.com/2019/06/17/19-10/wechat_pay/</id>
    <published>2019-06-17T02:01:03.000Z</published>
    <updated>2019-10-09T07:53:35.853Z</updated>
    
    <content type="html"><![CDATA[<h3 id="小程序接入微信支付"><a href="#小程序接入微信支付" class="headerlink" title="小程序接入微信支付"></a>小程序接入微信支付</h3><p>思路：小程序提供了微信支付的api我们只要填写对应参数就行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">goodsbuy(data)&#123;</span><br><span class="line">//参数data是从后台获取的相关数据</span><br><span class="line">    wx.requestPayment(&#123; //支付api</span><br><span class="line">      timeStamp: data.timeStamp,//时间戳</span><br><span class="line">      nonceStr: data.nonceStr,//随机字符串</span><br><span class="line">      package: data.package,//统一下单接口返回的 prepay_id 参数值</span><br><span class="line">      signType: &apos;MD5&apos;,//签名算法</span><br><span class="line">      paySign: data.sign,//签名</span><br><span class="line">      success:res=&gt;&#123;</span><br><span class="line">        alert(&apos;success&apos;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></p><p>注：支付的签名算法需要用到key，这个放在前端来做是很不安全的，所以一般都是后台做好签名直接返回我们需要的数据填入即可，但我们也要做一些了解<br>例：利用md5做的签名，要先下载一个md5并导入小程序<br>var MD5 = require(“../../utils/MD5Encode.js”);<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let newdata = parseInt(new Date().getTime() / 1000) + “”, //将时间戳转为字符串</span><br><span class="line">//拼接参数进行md5加密</span><br><span class="line">   let countMD5 = &quot;appId=&quot; + data.appid + &quot;&amp;nonceStr=&quot; + data.nonce_str + &quot;&amp;package=&quot; +</span><br><span class="line">   data.prepay_id + &quot;&amp;signType=MD5&quot; + &quot;&amp;timeStamp=&quot; + newdata + &quot;&amp;key=&quot; + data.key;</span><br><span class="line">MD5.hexMD5(countMD5).toUpperCase()</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;小程序接入微信支付&quot;&gt;&lt;a href=&quot;#小程序接入微信支付&quot; class=&quot;headerlink&quot; title=&quot;小程序接入微信支付&quot;&gt;&lt;/a&gt;小程序接入微信支付&lt;/h3&gt;&lt;p&gt;思路：小程序提供了微信支付的api我们只要填写对应参数就行&lt;br&gt;&lt;figure c
      
    
    </summary>
    
      <category term="wechat" scheme="http://yoursite.com/categories/wechat/"/>
    
    
      <category term="wechat" scheme="http://yoursite.com/tags/wechat/"/>
    
  </entry>
  
  <entry>
    <title>canvas字体换行</title>
    <link href="http://yoursite.com/2019/06/17/19-06/19-6-17/"/>
    <id>http://yoursite.com/2019/06/17/19-06/19-6-17/</id>
    <published>2019-06-17T02:01:03.000Z</published>
    <updated>2019-06-17T02:14:23.619Z</updated>
    
    <content type="html"><![CDATA[<h3 id="canvas绘制的字体换行"><a href="#canvas绘制的字体换行" class="headerlink" title="canvas绘制的字体换行"></a>canvas绘制的字体换行</h3><p>问题描述：canvas绘制的字体是不会自动换行的，也没有相关的api，所以我们想要canvas文字自动换行，只能利用js从字体长度或字数入手</p><p>相关api：canvas measureText()在画布上输出文本之前，检查字体的宽度<br>利用这个方法我们可以在文字超出指定长度后做换行处理</p><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;mask_operation&quot; v-show=&quot;cvsshow&quot; @click=&quot;createdImg&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;cvs-box&quot;&gt;</span><br><span class="line">        &lt;canvas id=&quot;mycvs&quot; ref=&quot;cvs&quot; width=&quot;300&quot; height=&quot;369&quot;&gt;&lt;/canvas&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="js"><a href="#js" class="headerlink" title="js"></a>js</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">createdImg()&#123;</span><br><span class="line">    //$refs.cvs获取vue的dom节点（原生的直接document获取dom节点）</span><br><span class="line">    let cvs = this.$refs.cvs</span><br><span class="line">    let ctx=cvs.getContext(&quot;2d&quot;);</span><br><span class="line">    this.drawtext(ctx,&apos;在画布上输出文本之前，检查字体的宽度&apos;,15,245,168)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 文字换行</span><br><span class="line">drawtext(ctx,t,x,y,w)&#123;</span><br><span class="line">    //参数说明</span><br><span class="line">    //ctx：canvas的 2d 对象，t：绘制的文字，x,y:文字坐标，w：文字最大宽度</span><br><span class="line">    let chr = t.split(&quot;&quot;)</span><br><span class="line">    let temp = &quot;&quot;</span><br><span class="line">    let row = []</span><br><span class="line"></span><br><span class="line">    for (let a = 0; a&lt;chr.length;a++)&#123;</span><br><span class="line">        if( ctx.measureText(temp).width &lt; w &amp;&amp; ctx.measureText(temp+(chr[a])).width &lt;= w)&#123;</span><br><span class="line">            temp += chr[a];</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            row.push(temp);</span><br><span class="line">            temp = chr[a];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    row.push(temp)</span><br><span class="line">    for(let b=0;b&lt;row.length;b++)&#123;</span><br><span class="line">        ctx.fillText(row[b],x,y+(b+1)*20);//每行字体y坐标间隔20</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;canvas绘制的字体换行&quot;&gt;&lt;a href=&quot;#canvas绘制的字体换行&quot; class=&quot;headerlink&quot; title=&quot;canvas绘制的字体换行&quot;&gt;&lt;/a&gt;canvas绘制的字体换行&lt;/h3&gt;&lt;p&gt;问题描述：canvas绘制的字体是不会自动换行的，也没有相关的api，所以我们想要canvas文字自动换行，只能利用js从字体长度或字数入手&lt;/p&gt;
&lt;p&gt;相关api：canvas measureText()在画布上输出文本之前，检查字体的宽度&lt;br&gt;利用这个方法我们可以在文字超出指定长度后做换行处理&lt;/p&gt;
&lt;h3 id=&quot;HTML&quot;&gt;&lt;a href=&quot;#HTML&quot; class=&quot;headerlink&quot; title=&quot;HTML&quot;&gt;&lt;/a&gt;HTML&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;div class=&amp;quot;mask_operation&amp;quot; v-show=&amp;quot;cvsshow&amp;quot; @click=&amp;quot;createdImg&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;div class=&amp;quot;cvs-box&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;canvas id=&amp;quot;mycvs&amp;quot; ref=&amp;quot;cvs&amp;quot; width=&amp;quot;300&amp;quot; height=&amp;quot;369&amp;quot;&amp;gt;&amp;lt;/canvas&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="canvas" scheme="http://yoursite.com/categories/canvas/"/>
    
    
      <category term="canvas" scheme="http://yoursite.com/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>vue-scroller的使用</title>
    <link href="http://yoursite.com/2019/06/17/19-10/01/"/>
    <id>http://yoursite.com/2019/06/17/19-10/01/</id>
    <published>2019-06-17T02:01:03.000Z</published>
    <updated>2019-10-09T07:55:18.644Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>使用npm 安装<br>npm install vue-scroller -d</p><h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><p>在main.js里面使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import VueScroller from &apos;vue-scroller&apos;</span><br><span class="line">Vue.use(VueScroller)</span><br></pre></td></tr></table></figure></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>注意：scroller的使用最好设置一个高<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;scroller style=&quot;top: 100px;&quot; :height=&apos;400&apos; :on-refresh=&quot;refresh&quot; :on-infinite=&quot;infinite&quot; ref=&quot;myscroller&quot;&gt;</span><br><span class="line"></span><br><span class="line">            &lt;div class=&quot;order-box&quot; v-for=&quot;(item,index) in orderList&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">                </span><br><span class="line">            &lt;/div&gt;</span><br><span class="line"></span><br><span class="line"> &lt;/scroller&gt;</span><br></pre></td></tr></table></figure></p><h3 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">data()&#123;</span><br><span class="line">           return&#123;</span><br><span class="line">                status:&apos;all&apos;,</span><br><span class="line">                orderList:[],</span><br><span class="line">                page:0,</span><br><span class="line">                all_page:1,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br></pre></td></tr></table></figure><h3 id="下拉刷新"><a href="#下拉刷新" class="headerlink" title="下拉刷新"></a>下拉刷新</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">refresh (done) &#123;</span><br><span class="line">setTimeout(()=&gt;&#123;</span><br><span class="line">done();</span><br><span class="line">                &#125;,1500)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="上拉加载更多"><a href="#上拉加载更多" class="headerlink" title="上拉加载更多"></a>上拉加载更多</h3><p>注意：done的使用，如果在数据没有赋值到模板前就调用，就会一直触发下拉函数，所以我们要在请求成功的回调中模板赋值后调用</p><p>下拉的函数是绑定属性的方式绑定在scroller标签上的，所以我们不需要在created里面调用一次请求函数，页面初始化的时候回自动调用一次下拉的函数，从而获取到第一页的数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">//下拉触发</span><br><span class="line"></span><br><span class="line">infinite (done) &#123;</span><br><span class="line">                if(this.page&gt;=this.all_page)&#123;</span><br><span class="line">setTimeout(()=&gt;&#123;</span><br><span class="line">this.$refs.myscroller.finishInfinite(true);</span><br><span class="line">&#125;,1500)</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    </span><br><span class="line">                    setTimeout(()=&gt;&#123;</span><br><span class="line">                        this.page++;</span><br><span class="line">                        this.getorderList(done)</span><br><span class="line"></span><br><span class="line">&#125;,500);</span><br><span class="line">                &#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">getorderList(done)&#123;</span><br><span class="line">                this.$http(&#123;</span><br><span class="line">                    method:&apos;post&apos;,</span><br><span class="line">                    url:&apos;/seckill/server/orderList&apos;,</span><br><span class="line">                    data:&#123;</span><br><span class="line">                        jwt:this.jwt,</span><br><span class="line">                        status:this.status,</span><br><span class="line">                        page:this.page,</span><br><span class="line">                        page_size:5</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;).then(res=&gt;&#123;</span><br><span class="line">                    if(res.data.code == 0)&#123;</span><br><span class="line">                        </span><br><span class="line">                        </span><br><span class="line">                        this.orderList.push.apply(this.orderList,res.data.data.list)</span><br><span class="line">                        this.$refs.myscroller.finishInfinite(true)</span><br><span class="line"></span><br><span class="line">                        this.page = res.data.data.page</span><br><span class="line">this.all_page = res.data.data.all_page</span><br><span class="line">                        done();</span><br><span class="line">                    &#125;else&#123;</span><br><span class="line">                       </span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;,</span><br></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>如果涉及到tab栏切换，需要重新设置scroller的状态.finishInfinite(false)参数为false时会从新调用一次上拉函数，从而重置当前scroller的状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">goodsAll()&#123;</span><br><span class="line">               this.status = &apos;all&apos;</span><br><span class="line">               this.page = 0</span><br><span class="line">this.all_page = 1</span><br><span class="line">this.$refs.myscroller.finishInfinite(false);</span><br><span class="line">               this.orderList = []</span><br><span class="line">           &#125;,</span><br></pre></td></tr></table></figure><p>注：</p><p>triggerPullToRefresh() 触发下拉刷新</p><p>finishPullToRefresh() 完成下拉刷新</p><p>this.$refs.my_scroller.finishInfinite(false)<br>finishInfinite(isNoMoreData :Boolean) 当参数为false时，上拉获取数据可以重新调用。当参数为true，上拉获取数据回调函数停止使用,下拉下部不再显示loading，会显示‘’暂无更多数据</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h3&gt;&lt;p&gt;使用npm 安装&lt;br&gt;npm install vue-scroller -d&lt;/p&gt;
&lt;h3 id=&quot;引入&quot;&gt;&lt;a href=&quot;#引入&quot; 
      
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>小程序picker组件BUG，fields属性为month时，IOS显示不正确</title>
    <link href="http://yoursite.com/2019/06/17/19-10/06/"/>
    <id>http://yoursite.com/2019/06/17/19-10/06/</id>
    <published>2019-06-17T02:01:03.000Z</published>
    <updated>2019-10-09T08:01:58.236Z</updated>
    
    <content type="html"><![CDATA[<p>问题描述：picker组件BUG，fields属性为month时，苹果手机上下拉显示1年、2年、3年…;</p><p>解决方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;picker mode=&apos;date&apos; value=&quot;&#123;&#123;date&#125;&#125;&quot; fields=&apos;month&apos; start=&quot;1970-01-01&quot; end=&quot;2080-01-01&quot; bindchange=&quot;bindDateChange&quot;&gt;</span><br><span class="line">   &lt;view&gt;&#123;&#123;date&#125;&#125; &lt;icon class=&quot;iconfont icon-xiala-&quot;&gt;&lt;/icon&gt;&lt;/view&gt;</span><br><span class="line">&lt;/picker&gt;</span><br></pre></td></tr></table></figure></p><p>  把start和end的时间格式改成YYYY-MM-DD，就行了，例如： start=”1970-01-01” end=”2080-01-01”</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;问题描述：picker组件BUG，fields属性为month时，苹果手机上下拉显示1年、2年、3年…;&lt;/p&gt;
&lt;p&gt;解决方法：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;
      
    
    </summary>
    
      <category term="wechat" scheme="http://yoursite.com/categories/wechat/"/>
    
    
      <category term="wechat" scheme="http://yoursite.com/tags/wechat/"/>
    
  </entry>
  
  <entry>
    <title>input属性placeholder在iOS中显示不完整的解决方法</title>
    <link href="http://yoursite.com/2019/06/17/19-10/03/"/>
    <id>http://yoursite.com/2019/06/17/19-10/03/</id>
    <published>2019-06-17T02:01:03.000Z</published>
    <updated>2019-10-09T07:57:56.875Z</updated>
    
    <content type="html"><![CDATA[<h3 id="在一些高版本的ISO上设置placeholder显示的字体大小的时候-有时候会被遮挡掉一部分"><a href="#在一些高版本的ISO上设置placeholder显示的字体大小的时候-有时候会被遮挡掉一部分" class="headerlink" title="在一些高版本的ISO上设置placeholder显示的字体大小的时候,有时候会被遮挡掉一部分"></a>在一些高版本的ISO上设置placeholder显示的字体大小的时候,有时候会被遮挡掉一部分</h3><p>出现原因：input 里面的字体大小小于placeholder的字体大小</p><p>解决方法: 设置input字体大于placeholder的字体</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">input&#123;</span><br><span class="line">    font-size: 16px;</span><br><span class="line">&#125;</span><br><span class="line">::-webkit-input-placeholder&#123;</span><br><span class="line">     font-size: 13px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;在一些高版本的ISO上设置placeholder显示的字体大小的时候-有时候会被遮挡掉一部分&quot;&gt;&lt;a href=&quot;#在一些高版本的ISO上设置placeholder显示的字体大小的时候-有时候会被遮挡掉一部分&quot; class=&quot;headerlink&quot; title=&quot;
      
    
    </summary>
    
      <category term="js" scheme="http://yoursite.com/categories/js/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>小程序动画创建及动画结束的监听事件</title>
    <link href="http://yoursite.com/2019/06/17/19-10/07/"/>
    <id>http://yoursite.com/2019/06/17/19-10/07/</id>
    <published>2019-06-17T02:01:03.000Z</published>
    <updated>2019-10-09T08:02:55.723Z</updated>
    
    <content type="html"><![CDATA[<h3 id="小程序动画创建"><a href="#小程序动画创建" class="headerlink" title="小程序动画创建"></a>小程序动画创建</h3><p>绑定动画数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;view class=&quot;img-box&quot; animation=&apos;&#123;&#123;animationData&#125;&#125;&apos; bindtransitionend=&apos;animationend&apos; bindtap=&apos;move&apos;&gt;</span><br><span class="line">  &lt;image src=&quot;&#123;&#123;AppImg.total_bg&#125;&#125;&quot;&gt;&lt;/image&gt;</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure></p><p>设置动画</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">data()&#123;</span><br><span class="line">animationData: &apos;&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">move()&#123;</span><br><span class="line">//创建动画</span><br><span class="line">var animation = wx.createAnimation(&#123;</span><br><span class="line">          duration: 400,</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">//描述动画步骤</span><br><span class="line">animation.top(-500).scale(0.8).step()</span><br><span class="line"></span><br><span class="line">//导出动画数据传递给组件的animation属性,否则动画不会执行</span><br><span class="line">this.setData(&#123;</span><br><span class="line">          animationData:animation.export()</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="监听动画事件（开始，结束）"><a href="#监听动画事件（开始，结束）" class="headerlink" title="监听动画事件（开始，结束）"></a>监听动画事件（开始，结束）</h3><p>动画执行过程中使用 bindtransitionend bindanimationstart bindanimationiteration bindanimationend 来监听动画事件</p><p>bindtransitionend：监听CSS 渐变结束或 wx.createAnimation 结束一个阶段</p><p>注意：bindtransitionend监听的是wx.createAnimation 结束一个阶段而不是整个动画的结束（也就是一个step()结束）</p><p>bindanimationstart：监听CSS 动画开始</p><p>bindanimationiteration：CSS 动画结束一个阶段</p><p>bindanimationend：CSS 动画结束</p><p>注意：bindanimationstart bindanimationiteration bindanimationend无法监听到wx.createAnimation创建的动画</p><h4 id="注：这几个事件都不是冒泡事件，需要绑定在真正发生了动画的节点上才会生效。"><a href="#注：这几个事件都不是冒泡事件，需要绑定在真正发生了动画的节点上才会生效。" class="headerlink" title="注：这几个事件都不是冒泡事件，需要绑定在真正发生了动画的节点上才会生效。"></a>注：这几个事件都不是冒泡事件，需要绑定在真正发生了动画的节点上才会生效。</h4><p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//监听动画的事件需要和绑定动画的节点在一起</span><br><span class="line">&lt;view class=&quot;img-box&quot; animation=&apos;&#123;&#123;animationData&#125;&#125;&apos; bindtransitionend=&apos;animationend&apos; &gt;</span><br><span class="line">      &lt;image src=&quot;&#123;&#123;AppImg.total_bg&#125;&#125;&quot;&gt;&lt;/image&gt;</span><br><span class="line">    &lt;/view&gt;</span><br></pre></td></tr></table></figure></p><p>js部分<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">animationend()&#123;</span><br><span class="line">    console.log(&apos;动画结束了&apos;)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;小程序动画创建&quot;&gt;&lt;a href=&quot;#小程序动画创建&quot; class=&quot;headerlink&quot; title=&quot;小程序动画创建&quot;&gt;&lt;/a&gt;小程序动画创建&lt;/h3&gt;&lt;p&gt;绑定动画数据&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;
      
    
    </summary>
    
      <category term="wechat" scheme="http://yoursite.com/categories/wechat/"/>
    
    
      <category term="wechat" scheme="http://yoursite.com/tags/wechat/"/>
    
  </entry>
  
  <entry>
    <title>深拷贝</title>
    <link href="http://yoursite.com/2019/06/17/19-10/05/"/>
    <id>http://yoursite.com/2019/06/17/19-10/05/</id>
    <published>2019-06-17T02:01:03.000Z</published>
    <updated>2019-10-09T07:59:57.837Z</updated>
    
    <content type="html"><![CDATA[<p>最简单的深拷贝(JSON.stringify() 和JSON.parse())<br>先把对象使用JSON.stringify()转为字符串，再赋值给另外一个变量，然后使用JSON.parse()转回来即可</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最简单的深拷贝(JSON.stringify() 和JSON.parse())&lt;br&gt;先把对象使用JSON.stringify()转为字符串，再赋值给另外一个变量，然后使用JSON.parse()转回来即可&lt;/p&gt;

      
    
    </summary>
    
      <category term="js" scheme="http://yoursite.com/categories/js/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>vue中在某一页面禁掉移动设备的物理返回键</title>
    <link href="http://yoursite.com/2019/06/17/19-10/02/"/>
    <id>http://yoursite.com/2019/06/17/19-10/02/</id>
    <published>2019-06-17T02:01:03.000Z</published>
    <updated>2019-10-09T07:57:05.988Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-挂载完成后，判断浏览器是否支持popstate"><a href="#1-挂载完成后，判断浏览器是否支持popstate" class="headerlink" title="1.挂载完成后，判断浏览器是否支持popstate"></a>1.挂载完成后，判断浏览器是否支持popstate</h3><p>History 对象包含用户（在浏览器窗口中）访问过的 URL。<br>History 对象是 window 对象的一部分，可通过 window.history 属性对其进行访问。<br>通过监听history的pushState来判断页面的状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mounted()&#123;</span><br><span class="line">            if (window.history &amp;&amp; window.history.pushState) &#123;</span><br><span class="line">            // 往历史记录里面添加一条新的当前页面的url</span><br><span class="line">            history.pushState(null, null, document.URL);</span><br><span class="line">            // 给 popstate 绑定一个方法 监听页面刷新</span><br><span class="line">            window.addEventListener(&apos;popstate&apos;, this.goBack, false);//false阻止默认事件</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br></pre></td></tr></table></figure><h3 id="2-页面销毁时，取消监听。否则其他vue路由页面也会被监听"><a href="#2-页面销毁时，取消监听。否则其他vue路由页面也会被监听" class="headerlink" title="2.页面销毁时，取消监听。否则其他vue路由页面也会被监听"></a>2.页面销毁时，取消监听。否则其他vue路由页面也会被监听</h3><p>在页面销毁的生命周期中取消监听<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">destroyed()&#123;</span><br><span class="line">            window.removeEventListener(&apos;popstate&apos;, this.goBack, false);//false阻止默认事件</span><br><span class="line">        &#125;,</span><br></pre></td></tr></table></figure></p><h3 id="3-将监听操作写在methods里面，removeEventListener取消监听内容必须跟开启监听保持一致，所以函数拿到methods里面写"><a href="#3-将监听操作写在methods里面，removeEventListener取消监听内容必须跟开启监听保持一致，所以函数拿到methods里面写" class="headerlink" title="3.将监听操作写在methods里面，removeEventListener取消监听内容必须跟开启监听保持一致，所以函数拿到methods里面写"></a>3.将监听操作写在methods里面，removeEventListener取消监听内容必须跟开启监听保持一致，所以函数拿到methods里面写</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">goBack()&#123;</span><br><span class="line">        history.pushState(null, null, document.URL);</span><br><span class="line">      &#125;,</span><br></pre></td></tr></table></figure><p>注：history.pushState()方法向浏览器历史添加了一个状态。pushState()方法带有三个参数：一个状态对象、一个标题(现在被忽略了)以及一个可选的URL地址</p><p>history.pushState(state, title, url);</p><p>state object —— 状态对象是一个由pushState()方法创建的、与历史纪录相关的javascript对象。当用户定向到一个新的状态时，会触发popstate事件。事件的state属性包含了历史纪录的state对象。如果不需要这个对象，此处可以填null</p><p>title —— 新页面的标题，但是所有浏览器目前都忽略这个值，因此这里可以填null</p><p>URL —— 这个参数提供了新历史纪录的地址。新URL必须和当前URL在同一个域，否则，pushState()将丢出异常。这个参数可选，如果它没有被特别标注，会被设置为文档的当前URL</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-挂载完成后，判断浏览器是否支持popstate&quot;&gt;&lt;a href=&quot;#1-挂载完成后，判断浏览器是否支持popstate&quot; class=&quot;headerlink&quot; title=&quot;1.挂载完成后，判断浏览器是否支持popstate&quot;&gt;&lt;/a&gt;1.挂载完成后，判断浏
      
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>小程序左滑显示删除功能</title>
    <link href="http://yoursite.com/2019/05/30/19-05/19-5-30/"/>
    <id>http://yoursite.com/2019/05/30/19-05/19-5-30/</id>
    <published>2019-05-30T07:29:13.000Z</published>
    <updated>2019-05-31T07:17:27.196Z</updated>
    
    <content type="html"><![CDATA[<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li><p>采用分层思想，每个item分为上下两层，上面一层放内容，下面一层放删除按钮</p></li><li><p>上面一层采用绝对定位，下面一层放到需要显示的位置，通过动态设置right属性的值，来实现向左滑动漏出下面的删除按钮</p></li><li><p>通过touchstart，touchmove 这几个事件来判断滑动的方向</p></li><li><p>通过item的index值确定滑动的是哪一项，设置滑动项的right值</p></li></ol><a id="more"></a><h3 id="在需要滑动的item上注册事件"><a href="#在需要滑动的item上注册事件" class="headerlink" title="在需要滑动的item上注册事件"></a>在需要滑动的item上注册事件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;view class=&apos;address-list&apos; data-index=&quot;&#123;&#123;index&#125;&#125;&quot; bindtouchstart=&apos;touchStart&apos; bindtouchmove=&apos;touchMove&apos;&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- 删除按钮 --&gt;</span><br><span class="line">    &lt;view class=&apos;del&apos;&gt;&lt;image src=&apos;&#123;&#123;AppImg.address_del&#125;&#125;&apos;&gt;&lt;/image&gt;&lt;/view&gt;</span><br><span class="line">    &lt;!-- 内容 --&gt;</span><br><span class="line">    &lt;view class=&apos;adsInfo&apos; style=&quot;right:&#123;&#123;item.right&#125;&#125;&quot;&gt;</span><br><span class="line">      &lt;view class=&apos;icontrue&apos;&gt;&lt;image src=&apos;&#123;&#123;AppImg.address_right&#125;&#125;&apos;&gt;&lt;/image&gt;&lt;/view&gt;</span><br><span class="line">      &lt;view class=&apos;info&apos;&gt;</span><br><span class="line">        &lt;view class=&apos;info-name&apos;&gt;涂山苏苏&lt;/view&gt;</span><br><span class="line">        &lt;view class=&apos;info-address&apos;&gt;海市上海市浦东新海市上海市浦东新海市上海市浦东新&lt;/view&gt;</span><br><span class="line">      &lt;/view&gt;</span><br><span class="line">      &lt;view class=&apos;iconmsg&apos;&gt;&lt;image src=&apos;&#123;&#123;AppImg.address_change&#125;&#125;&apos;&gt;&lt;/image&gt;&lt;/view&gt;</span><br><span class="line">    &lt;/view&gt;</span><br><span class="line"></span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure><h3 id="js"><a href="#js" class="headerlink" title="js"></a>js</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">data:&#123;</span><br><span class="line">    movedel:&#123;</span><br><span class="line">      clientStart:&apos;&apos;,//滑动开始的位置</span><br><span class="line">      clientMove:&apos;&apos;,//滑动的位置</span><br><span class="line">    &#125;,</span><br><span class="line">    addressList:[</span><br><span class="line">      &#123;id:1,right:&apos;&apos;&#125;,</span><br><span class="line">      &#123; id: 2, right: &apos;&apos; &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 开始滑动</span><br><span class="line">  touchStart(e)&#123;</span><br><span class="line">    let start = &quot;movedel.clientStart&quot;</span><br><span class="line">    this.setData(&#123;</span><br><span class="line">      [start]: e.touches[0].clientX</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  // 滑动</span><br><span class="line">  touchStart(e)&#123;</span><br><span class="line">    let start = &quot;movedel.clientStart&quot;</span><br><span class="line">    this.setData(&#123;</span><br><span class="line">      [start]: e.touches[0].clientX</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  // 滑动</span><br><span class="line">  touchMove(e)&#123;</span><br><span class="line">    let move = &apos;movedel.clientMove&apos;</span><br><span class="line">    this.setData(&#123;</span><br><span class="line">      [move]: e.touches[0].clientX</span><br><span class="line">    &#125;)</span><br><span class="line">    let distance = this.data.movedel.clientStart - this.data.movedel.clientMove</span><br><span class="line">    //确定滑动的是哪一项</span><br><span class="line">    let index = e.currentTarget.dataset.index</span><br><span class="line">    </span><br><span class="line">    let list = this.data.addressList</span><br><span class="line"></span><br><span class="line">    if(distance&lt;=0)&#123;</span><br><span class="line">      list[index].right = &apos;0&apos;;</span><br><span class="line">      this.setData(&#123;</span><br><span class="line">        addressList:list</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    if(distance&gt;=80)&#123;</span><br><span class="line">      list[index].right = &apos;80rpx&apos;;</span><br><span class="line">      this.setData(&#123;</span><br><span class="line">        addressList: list</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;采用分层思想，每个item分为上下两层，上面一层放内容，下面一层放删除按钮&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;上面一层采用绝对定位，下面一层放到需要显示的位置，通过动态设置right属性的值，来实现向左滑动漏出下面的删除按钮&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;通过touchstart，touchmove 这几个事件来判断滑动的方向&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;通过item的index值确定滑动的是哪一项，设置滑动项的right值&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="小程序" scheme="http://yoursite.com/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>小程序商品秒杀</title>
    <link href="http://yoursite.com/2019/05/18/19-05/19-5-31/"/>
    <id>http://yoursite.com/2019/05/18/19-05/19-5-31/</id>
    <published>2019-05-18T07:20:03.000Z</published>
    <updated>2019-05-31T08:28:54.011Z</updated>
    
    <content type="html"><![CDATA[<p>思路：</p><ol><li>获取当前时间，同时得到活动结束时间数组；</li><li>循环活动结束时间数组，计算每个商品活动结束时间的倒计时天、时、分、秒；</li><li>用 setData 方法刷新数据；</li><li>每个一秒执行一次倒计时函数 setInterval(this.countTime,1000)</li></ol><a id="more"></a><h3 id="wxml"><a href="#wxml" class="headerlink" title="wxml"></a>wxml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;view class=&apos;goods-box&apos; wx:for=&quot;&#123;&#123;goodsData&#125;&#125;&quot; wx:key=&quot;index&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;view class=&apos;time-txt&apos;&gt;距离开始还剩：&#123;&#123;item.now&#125;&#125;&lt;/view&gt;</span><br><span class="line"></span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure><p>js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">  data&#123;</span><br><span class="line">      goodsData:[</span><br><span class="line">      &#123; id: 1, status: 0, endtime: &apos;2019-05-29 15:06:00&apos;, now:&apos;&apos; &#125;,</span><br><span class="line">      &#123; id: 2, status: 1, endtime: &apos;2019-05-31 15:06:00&apos;, now:&apos;&apos; &#125;,</span><br><span class="line">      &#123; id: 3, status: 2, endtime: &apos;2019-06-01 15:06:00&apos;, now:&apos;&apos; &#125;,</span><br><span class="line">      &#123; id: 4, status: 3, endtime: &apos;2019-05-31 19:06:00&apos;, now:&apos;&apos; &#125;</span><br><span class="line">      ],</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">onLoad: function (options) &#123;</span><br><span class="line">  this.countTime()</span><br><span class="line">  setInterval(this.countTime,1000)</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">// 倒计时</span><br><span class="line">countTime()&#123;</span><br><span class="line">  let now = new Date().getTime()</span><br><span class="line">  let endList = this.data.goodsData</span><br><span class="line"></span><br><span class="line">  endList.forEach(v=&gt;&#123;</span><br><span class="line">    let end = new Date(v.endtime).getTime()</span><br><span class="line">    //时间差</span><br><span class="line">    let diftime = end - now </span><br><span class="line">    let h, m, s;</span><br><span class="line">    if (diftime &gt; 0)&#123;</span><br><span class="line">      h = Math.floor(diftime / 1000 / 60 / 60 % 24);</span><br><span class="line">      m = Math.floor(diftime / 1000 / 60 % 60);</span><br><span class="line">      s = Math.floor(diftime / 1000 % 60);</span><br><span class="line"></span><br><span class="line">      s = s &lt; 10 ? &quot;0&quot; + s : s</span><br><span class="line">      m = m &lt; 10 ? &quot;0&quot; + m : m</span><br><span class="line">      h = h &lt; 10 ? &quot;0&quot; + h : h</span><br><span class="line">      v.now = h + &quot;时&quot; + m + &quot;分&quot; + s + &quot;秒&quot;</span><br><span class="line">      //递归每秒调用countTime方法，显示动态时间效果</span><br><span class="line">      // setTimeout(this.countTime, 1000)</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">      //已结束</span><br><span class="line">      v.now = &apos;00时00分00秒&apos;</span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;)</span><br><span class="line">  this.setData(&#123;</span><br><span class="line">    goodsData: endList</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;思路：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;获取当前时间，同时得到活动结束时间数组；&lt;/li&gt;
&lt;li&gt;循环活动结束时间数组，计算每个商品活动结束时间的倒计时天、时、分、秒；&lt;/li&gt;
&lt;li&gt;用 setData 方法刷新数据；&lt;/li&gt;
&lt;li&gt;每个一秒执行一次倒计时函数 setInterval(this.countTime,1000)&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="秒杀" scheme="http://yoursite.com/categories/%E7%A7%92%E6%9D%80/"/>
    
    
      <category term="秒杀" scheme="http://yoursite.com/tags/%E7%A7%92%E6%9D%80/"/>
    
  </entry>
  
  <entry>
    <title>vue的axios拦截器使用</title>
    <link href="http://yoursite.com/2019/05/10/19-05/19-5-10/"/>
    <id>http://yoursite.com/2019/05/10/19-05/19-5-10/</id>
    <published>2019-05-10T03:20:03.000Z</published>
    <updated>2019-05-24T01:50:34.628Z</updated>
    
    <content type="html"><![CDATA[<h3 id="axios拦截器"><a href="#axios拦截器" class="headerlink" title="axios拦截器"></a>axios拦截器</h3><p>下载并使用axios后可以对全局进行拦截器设置。拦截器在发送请求前或响应返回时做一些特殊的处理。 </p><p>下面是一个为axios添加请求loading的例子：</p><h3 id="添加请求拦截器"><a href="#添加请求拦截器" class="headerlink" title="添加请求拦截器"></a>添加请求拦截器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//定义一个请求拦截器</span><br><span class="line">axios.interceptors.request.use(function(config)&#123;</span><br><span class="line">  Vue.$vux.loading.show(); //在请求发出之前进行一些操作</span><br><span class="line">  return config</span><br><span class="line">&#125;,function (error) &#123;</span><br><span class="line">  　　// 对请求错误做些什么</span><br><span class="line">  // return Promise.reject(error)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="添加响应拦截器"><a href="#添加响应拦截器" class="headerlink" title="添加响应拦截器"></a>添加响应拦截器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//定义一个响应拦截器</span><br><span class="line">axios.interceptors.response.use(function(config)&#123;</span><br><span class="line">  Vue.$vux.loading.hide();;//在这里对返回的数据进行处理</span><br><span class="line">  return config</span><br><span class="line">&#125;,function (error) &#123;</span><br><span class="line">  　　// 对请求错误做些什么</span><br><span class="line">  // return Promise.reject(error)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="移除拦截器"><a href="#移除拦截器" class="headerlink" title="移除拦截器"></a>移除拦截器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var myInterceptor = axios.interceptors.request.use(function () &#123;/*...*/&#125;);</span><br><span class="line">axios.interceptors.request.eject(myInterceptor);</span><br></pre></td></tr></table></figure><h3 id="为axios实例添加拦截器"><a href="#为axios实例添加拦截器" class="headerlink" title="为axios实例添加拦截器"></a>为axios实例添加拦截器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var instance = axios.create();</span><br><span class="line">instance.interceptors.request.use(function () &#123;/*...*/&#125;);</span><br></pre></td></tr></table></figure><h3 id="某一个函数不希望受到全局拦截器的影响"><a href="#某一个函数不希望受到全局拦截器的影响" class="headerlink" title="某一个函数不希望受到全局拦截器的影响"></a>某一个函数不希望受到全局拦截器的影响</h3><p>解决方法：在函数内从新添加一个拦截器<br>如下：为请求函数添加一个新的拦截器使之不受全局拦截器影响<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const $ajax = this.$http.create()</span><br></pre></td></tr></table></figure></p><p>例：下面函数不受全局拦截器影响<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">pollopenid()&#123;</span><br><span class="line">      const $ajax = this.$http.create()</span><br><span class="line">      $ajax(&#123;</span><br><span class="line">        method:&apos;post&apos;,</span><br><span class="line">        url:&apos;&apos;,</span><br><span class="line">        data:&#123;</span><br><span class="line">          </span><br><span class="line">        &#125;</span><br><span class="line">      &#125;).then(res=&gt;&#123;</span><br><span class="line">        </span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;axios拦截器&quot;&gt;&lt;a href=&quot;#axios拦截器&quot; class=&quot;headerlink&quot; title=&quot;axios拦截器&quot;&gt;&lt;/a&gt;axios拦截器&lt;/h3&gt;&lt;p&gt;下载并使用axios后可以对全局进行拦截器设置。拦截器在发送请求前或响应返回时做一些特殊的处理。 &lt;/p&gt;
&lt;p&gt;下面是一个为axios添加请求loading的例子：&lt;/p&gt;
&lt;h3 id=&quot;添加请求拦截器&quot;&gt;&lt;a href=&quot;#添加请求拦截器&quot; class=&quot;headerlink&quot; title=&quot;添加请求拦截器&quot;&gt;&lt;/a&gt;添加请求拦截器&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//定义一个请求拦截器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;axios.interceptors.request.use(function(config)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Vue.$vux.loading.show(); //在请求发出之前进行一些操作&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  return config&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;,function (error) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  　　// 对请求错误做些什么&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  // return Promise.reject(error)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue的计算属性和侦听器</title>
    <link href="http://yoursite.com/2019/05/07/19-05/19-5-7/"/>
    <id>http://yoursite.com/2019/05/07/19-05/19-5-7/</id>
    <published>2019-05-07T06:43:03.000Z</published>
    <updated>2019-05-07T07:20:30.923Z</updated>
    
    <content type="html"><![CDATA[<h3 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h3><h5 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h5><p>1、computed用来监控自己定义的变量，该变量不在data里面声明，直接在computed里面定义，然后就可以在页面上获取到并进行相应的数据处理</p><p>2、computed里可以完成各种复杂的逻辑，包括运算、函数调用等，只要最终返回一个结果就可以。</p><a id="more"></a><p>案例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div @click=&apos;add&apos;&gt; + &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">data()&#123;</span><br><span class="line">    return&#123;</span><br><span class="line">        num1: 11,</span><br><span class="line">        num2: 33</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed:&#123;</span><br><span class="line">      total:function()&#123;</span><br><span class="line">      return this.num1 + this.num2 //总分会随着num1，num2的变化而重新计算</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">      add()&#123;</span><br><span class="line">          this.num1++</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>上面案例中total返回的是num1和num2的总和，且每次点击加号时total的值都会随着num1的变化而变化，由此可知计算属性可以依赖多个Vue 实例的数据，只要其中任一数据变化，计算属性就会重新执行，视图也会更新。</p><h5 id="计算属性的setter"><a href="#计算属性的setter" class="headerlink" title="计算属性的setter"></a>计算属性的setter</h5><p>计算属性默认只有 getter ，不过在需要时你也可以提供一个 setter ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  fullName: &#123;</span><br><span class="line">    // getter</span><br><span class="line">    get: function () &#123;</span><br><span class="line">      return this.firstName + &apos; &apos; + this.lastName</span><br><span class="line">    &#125;,</span><br><span class="line">    // setter</span><br><span class="line">    set: function (newValue) &#123;</span><br><span class="line">      var names = newValue.split(&apos; &apos;)</span><br><span class="line">      this.firstName = names[0]</span><br><span class="line">      this.lastName = names[names.length - 1]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在再运行 vm.fullName = ‘John Doe’ 时，setter 会被调用，vm.firstName 和 vm.lastName 也会相应地被更新。</p><h3 id="侦听器-watch"><a href="#侦听器-watch" class="headerlink" title="侦听器 watch"></a>侦听器 watch</h3><p>虽然计算属性在大多数情况下更合适，但有时也需要一个自定义的侦听器。这就是为什么 Vue 通过 watch 选项提供了一个更通用的方法，来响应数据的变化。<br>当需要在数据变化时执行异步或开销较大的操作时，这个方式是最有用的</p><p>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;watch-example&quot;&gt;</span><br><span class="line">  &lt;p&gt;</span><br><span class="line">    Ask a yes/no question:</span><br><span class="line">    &lt;input v-model=&quot;question&quot;&gt;</span><br><span class="line">  &lt;/p&gt;</span><br><span class="line">  &lt;p&gt;&#123;&#123; answer &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">watch: &#123;</span><br><span class="line">    // 如果 `question` 发生改变，这个函数就会运行</span><br><span class="line">    question: function (newQuestion, oldQuestion) &#123;</span><br><span class="line">      this.answer = &apos;Waiting for you to stop typing...&apos;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></p><p>当我们监听的数据发生变化时，相应的函数就会运行，这个函数的第一个参数是变化的值，第二个参数是原来的值</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;计算属性&quot;&gt;&lt;a href=&quot;#计算属性&quot; class=&quot;headerlink&quot; title=&quot;计算属性&quot;&gt;&lt;/a&gt;计算属性&lt;/h3&gt;&lt;h5 id=&quot;理解&quot;&gt;&lt;a href=&quot;#理解&quot; class=&quot;headerlink&quot; title=&quot;理解&quot;&gt;&lt;/a&gt;理解&lt;/h5&gt;&lt;p&gt;1、computed用来监控自己定义的变量，该变量不在data里面声明，直接在computed里面定义，然后就可以在页面上获取到并进行相应的数据处理&lt;/p&gt;
&lt;p&gt;2、computed里可以完成各种复杂的逻辑，包括运算、函数调用等，只要最终返回一个结果就可以。&lt;/p&gt;
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue图片上传</title>
    <link href="http://yoursite.com/2019/05/06/19-05/19-5-6/"/>
    <id>http://yoursite.com/2019/05/06/19-05/19-5-6/</id>
    <published>2019-05-06T05:43:03.000Z</published>
    <updated>2019-05-06T06:00:15.500Z</updated>
    
    <content type="html"><![CDATA[<h3 id="将图片上传功能封装为一个组件（组件）"><a href="#将图片上传功能封装为一个组件（组件）" class="headerlink" title="将图片上传功能封装为一个组件（组件）"></a>将图片上传功能封装为一个组件（<imgupload>组件）</imgupload></h3><p>思路：使用input的file类型来上传图片，然后在利用FileReader读取到文件中的数据。</p><p>FileReader提供了如下方法：<br><img src="/2019/05/06/19-05/19-5-6/blog01.png" alt="zi">)<br><a id="more"></a><br>事件：<br><img src="/2019/05/06/19-05/19-5-6/blog02.png" alt="zi">)</p><h4 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//结构</span><br><span class="line">&lt;template&gt;       </span><br><span class="line">&lt;div class=&quot;upload&quot;&gt;</span><br><span class="line">    &lt;label for=&quot;file&quot;&gt;&lt;img :src=&quot;src&quot; alt=&quot;&quot;&gt;&lt;/label&gt;</span><br><span class="line">    &lt;input type=&quot;file&quot; @change=&quot;getFile&quot; ref=&quot;file&quot; id=&quot;file&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h4 id="图片上传的js"><a href="#图片上传的js" class="headerlink" title="图片上传的js"></a>图片上传的js</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">//js</span><br><span class="line">import logo from &apos;../assets/images/index_logo.png&apos;</span><br><span class="line">export default &#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">     return&#123;</span><br><span class="line">        src:logo</span><br><span class="line">     &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        //base64转为formdata</span><br><span class="line">        dataURItoBlob(dataURI) &#123;</span><br><span class="line">            var byteString = atob(dataURI.split(&apos;,&apos;)[1]);</span><br><span class="line">            var mimeString = dataURI.split(&apos;,&apos;)[0].split(&apos;:&apos;)[1].split(&apos;;&apos;)[0];</span><br><span class="line">            var ab = new ArrayBuffer(byteString.length);</span><br><span class="line">            var ia = new Uint8Array(ab);</span><br><span class="line">            for (var i = 0; i &lt; byteString.length; i++) &#123;</span><br><span class="line">                ia[i] = byteString.charCodeAt(i);</span><br><span class="line">            &#125;</span><br><span class="line">            return new Blob([ab], &#123;type: mimeString&#125;);</span><br><span class="line">        &#125;,</span><br><span class="line">        getFile:function(e)&#123;</span><br><span class="line">            let _this = this</span><br><span class="line">            let value_ = e.target</span><br><span class="line">            let files = e.target.files[0]//获取上传的图片</span><br><span class="line"></span><br><span class="line">            let size_ = 200;//文件限制的大小，单位为kb</span><br><span class="line">            let fileSize = (files.size / 1024).toFixed(0)//文件大小，单位kb</span><br><span class="line">            let fileType = value_.value.substring(value_.value.lastIndexOf(&quot;.&quot;))//文件格式</span><br><span class="line"></span><br><span class="line">            if (!e || !window.FileReader) &#123; return &#125;//是否支持FileReader</span><br><span class="line">            let reader = new FileReader()//new一个FileReader对象</span><br><span class="line">            reader.readAsDataURL(files) //将文件读取为 DataURL</span><br><span class="line">            //判断文件大小</span><br><span class="line">            if (fileSize &gt; size_) &#123;</span><br><span class="line">                alert(&apos;文件过大&apos;)</span><br><span class="line">                return false</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            if (!fileType.match(/.jpg|.jpeg|.gif|.png|.bmp/i)) &#123;</span><br><span class="line">                alert(&apos;请上传正确格式的图片&apos;)</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            reader.onload = function()&#123;//文件读取成功result 属性返回读取的结果</span><br><span class="line">                _this.src = this.result//展示图片</span><br><span class="line">                //将base64转为formdata</span><br><span class="line">                var blob = _this.dataURItoBlob(this.result);</span><br><span class="line">                let format = new FormData()</span><br><span class="line">                format.append(&apos;src&apos;,blob)</span><br><span class="line">                _this.$emit(&apos;getImage&apos;,format)//将路径传出去</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="组件的样式"><a href="#组件的样式" class="headerlink" title="组件的样式"></a>组件的样式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//样式</span><br><span class="line"> @r:2px;</span><br><span class="line">   .upload img&#123;</span><br><span class="line">        display: block;</span><br><span class="line">        width: 108/@r;</span><br><span class="line">        height: 108/@r;</span><br><span class="line">        margin-bottom: 34/@r;</span><br><span class="line">    &#125;</span><br><span class="line">   .upload input &#123;</span><br><span class="line">        display: none;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h3><p>上面将上传功能封装为imgupload组件，下面开始在其他需要的组件内调用</p><p>1、引入组件<br><code>import imgupload from &#39;../common/imgupload&#39;</code><br>2、命名组件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">   components:&#123;imgupload&#125;,//组件名称</span><br><span class="line">   created()&#123;</span><br><span class="line"></span><br><span class="line">   &#125;,</span><br><span class="line">   data()&#123;</span><br><span class="line">       return &#123;</span><br><span class="line">           addMask:true,</span><br><span class="line">           src:logo</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;,</span><br></pre></td></tr></table></figure></p><p>3、调用组件<br>组件间的关系是使用时产生的，在这里使用imgupload组件，所以imgupload组件是子组件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;imgupload @getImage=&apos;getImage&apos;&gt;&lt;/imgupload&gt;</span><br></pre></td></tr></table></figure></p><p>上传的图片需要传给后台，所以imgupload组件需要将图片传出来，这里imgupload组件是子组件，子传父使用事件传值（上面代码中的_this.$emit(‘getImage’,format)将图片传出来）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">methods:&#123;</span><br><span class="line">            </span><br><span class="line">    getImage(imgsrc)&#123;</span><br><span class="line">        //imgsrc是imgupload组件传出来的图片数据</span><br><span class="line">        this.src=imgsrc</span><br><span class="line">        // console.log(src)</span><br><span class="line">        </span><br><span class="line">        console.log(imgsrc.get(&apos;src&apos;),&apos;666&apos;)</span><br><span class="line">        //ajax</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;将图片上传功能封装为一个组件（组件）&quot;&gt;&lt;a href=&quot;#将图片上传功能封装为一个组件（组件）&quot; class=&quot;headerlink&quot; title=&quot;将图片上传功能封装为一个组件（组件）&quot;&gt;&lt;/a&gt;将图片上传功能封装为一个组件（&lt;imgupload&gt;组件）&lt;/imgupload&gt;&lt;/h3&gt;&lt;p&gt;思路：使用input的file类型来上传图片，然后在利用FileReader读取到文件中的数据。&lt;/p&gt;
&lt;p&gt;FileReader提供了如下方法：&lt;br&gt;&lt;img src=&quot;/2019/05/06/19-05/19-5-6/blog01.png&quot; alt=&quot;zi&quot;&gt;)&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>input输入框获取焦点后，底部固定定位的按钮顶起问题</title>
    <link href="http://yoursite.com/2019/04/30/19-04/19-4-30/"/>
    <id>http://yoursite.com/2019/04/30/19-04/19-4-30/</id>
    <published>2019-04-30T01:43:03.000Z</published>
    <updated>2019-04-30T02:02:45.217Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>问题：手机H5页面当input输入框获取焦点时，软键盘会弹起，这时：IOS底部固定定位的按钮不会随着键盘弹起而弹起；而安卓底部固定定位的按钮会跟随软键盘弹起而顶起，从而遮挡一部分视图</p><h3 id="解决方法一、监听window的resize事件，控制显示隐藏"><a href="#解决方法一、监听window的resize事件，控制显示隐藏" class="headerlink" title="解决方法一、监听window的resize事件，控制显示隐藏"></a>解决方法一、监听window的resize事件，控制显示隐藏</h3><p>此方法只对安卓有用，iOS没有监听window的resize事件（iOS的话还是用flex布局比较好）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 获取视图原始高度</span><br><span class="line">let screenHeight = document.body.offsetHeight</span><br><span class="line">// 为window绑定resize事件</span><br><span class="line">window.onresize = function () &#123;</span><br><span class="line">      let changeHeight = document.body.offsetHeight</span><br><span class="line">      if (changeHeight &lt; screenHeight) &#123;</span><br><span class="line">        // 隐藏被弹起的固定定位</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        // 显示</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="解决方法二、flex布局"><a href="#解决方法二、flex布局" class="headerlink" title="解决方法二、flex布局"></a>解决方法二、flex布局</h3><p>将屏幕分为上下两部分，主体为一部分，底部一部分，主体部分设置为flex:1,overflow: scroll;内容在主体内滑动，底部固定不动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">//样式</span><br><span class="line">html,body &#123;</span><br><span class="line">        height: 100%;</span><br><span class="line">        width: 100%;</span><br><span class="line">    &#125;</span><br><span class="line">.container &#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 100%;</span><br><span class="line">    display: flex;</span><br><span class="line">    flex-direction: column;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//需要滑动的主体内容设置为flex:1;overflow: scroll,这样当内容超出时只会在主体内滑动，而不会被底部固定的部分影响</span><br><span class="line">.main &#123;</span><br><span class="line">        flex:1;</span><br><span class="line">        width: 100%;</span><br><span class="line">        background-color:pink;</span><br><span class="line">        overflow: scroll;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">//需要固定不动的部分设置固定的高，</span><br><span class="line">.foot &#123;</span><br><span class="line">    height: 200px;</span><br><span class="line">    width: 100%;</span><br><span class="line">    background-color: #000;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//结构</span><br><span class="line">&lt;div class=&quot;container&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;main&quot;&gt;</span><br><span class="line">        &lt;p&gt;dsadasdsadsadsadasdsadasdsadasdsaddsadasdsadsadsadasdsadasdsadasdsad&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;foot&quot;&gt;</span><br><span class="line">        </span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h3&gt;&lt;p&gt;问题：手机H5页面当input输入框获取焦点时，软键盘会弹起，这时：IOS底部固定定位的按钮不会随着键盘弹起而弹起；而安卓底部固定定位的按钮会跟随软键盘弹起而顶起，从而遮挡一部分视图&lt;/p&gt;
&lt;h3 id=&quot;解决方法一、监听window的resize事件，控制显示隐藏&quot;&gt;&lt;a href=&quot;#解决方法一、监听window的resize事件，控制显示隐藏&quot; class=&quot;headerlink&quot; title=&quot;解决方法一、监听window的resize事件，控制显示隐藏&quot;&gt;&lt;/a&gt;解决方法一、监听window的resize事件，控制显示隐藏&lt;/h3&gt;&lt;p&gt;此方法只对安卓有用，iOS没有监听window的resize事件（iOS的话还是用flex布局比较好）&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// 获取视图原始高度&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let screenHeight = document.body.offsetHeight	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 为window绑定resize事件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;window.onresize = function () &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      let changeHeight = document.body.offsetHeight&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      if (changeHeight &amp;lt; screenHeight) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 隐藏被弹起的固定定位&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 显示&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="css" scheme="http://yoursite.com/categories/css/"/>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>hexo主题上传报错Template render error</title>
    <link href="http://yoursite.com/2019/04/29/19-04/19-4-29/"/>
    <id>http://yoursite.com/2019/04/29/19-04/19-4-29/</id>
    <published>2019-04-29T05:45:03.000Z</published>
    <updated>2019-04-28T05:58:47.029Z</updated>
    
    <content type="html"><![CDATA[<h3 id="模板渲染错误"><a href="#模板渲染错误" class="headerlink" title="模板渲染错误"></a>模板渲染错误</h3><p>出现原因：文章内有一些不能用的字符，导致.md格式文章转换报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">..\source\_posts目录下的文章</span><br></pre></td></tr></table></figure><p>解决方法：解决方案：仔细检查..\source_posts目录下的文章，有没有“{ }”等符号，或者代码没有被放入代码框内</p><p>注意：这里的代码框用多行代码框，单行代码框无效</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; message | filterA | filterB &#125;&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;模板渲染错误&quot;&gt;&lt;a href=&quot;#模板渲染错误&quot; class=&quot;headerlink&quot; title=&quot;模板渲染错误&quot;&gt;&lt;/a&gt;模板渲染错误&lt;/h3&gt;&lt;p&gt;出现原因：文章内有一些不能用的字符，导致.md格式文章转换报错&lt;/p&gt;
&lt;figure class=&quot;hig
      
    
    </summary>
    
      <category term="主题相关" scheme="http://yoursite.com/categories/%E4%B8%BB%E9%A2%98%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="主题相关" scheme="http://yoursite.com/tags/%E4%B8%BB%E9%A2%98%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title>Vue项目执行npm i安装依赖中出现的问题</title>
    <link href="http://yoursite.com/2019/04/28/19-04/19-4-28/"/>
    <id>http://yoursite.com/2019/04/28/19-04/19-4-28/</id>
    <published>2019-04-28T05:45:03.000Z</published>
    <updated>2019-04-28T06:03:49.056Z</updated>
    
    <content type="html"><![CDATA[<h3 id="报错chromedriver"><a href="#报错chromedriver" class="headerlink" title="报错chromedriver"></a>报错chromedriver</h3><p><img src="/2019/04/28/19-04/19-4-28/01.png" alt="zi"></p><p>出现原因：没有安装chromedriver</p><p>解决方法：执行以下命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install chromedriver --chromedriver_cdnurl=http://cdn.npm.taobao.org/dist/chromedriver</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;报错chromedriver&quot;&gt;&lt;a href=&quot;#报错chromedriver&quot; class=&quot;headerlink&quot; title=&quot;报错chromedriver&quot;&gt;&lt;/a&gt;报错chromedriver&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/2019/04/28/
      
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue过滤器 filter</title>
    <link href="http://yoursite.com/2019/04/25/19-04/19-4-25/"/>
    <id>http://yoursite.com/2019/04/25/19-04/19-4-25/</id>
    <published>2019-04-25T02:57:03.000Z</published>
    <updated>2019-04-28T05:31:09.407Z</updated>
    
    <content type="html"><![CDATA[<h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><p>Vue.js 允许你自定义过滤器，可被用于一些常见的文本格式化(比如在123后面加上abc,或者将一些状态值转为具体的描述：state=0显示‘已领取’等)。过滤器可以用在两个地方：双花括号插值和 v-bind 表达式<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 在双花括号中 --&gt;</span><br><span class="line">&#123;&#123; message | capitalize &#125;&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- 在 `v-bind` 中 --&gt;</span><br><span class="line">&lt;div v-bind:id=&quot;rawId | formatId&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="全局过滤器"><a href="#全局过滤器" class="headerlink" title="全局过滤器"></a>全局过滤器</h3><p>在创建 Vue 实例之前全局定义过滤器:</p><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Vue.filter(&apos;capitalize&apos;, function (value) &#123;</span><br><span class="line">if (!value) return &apos;&apos;</span><br><span class="line">value = value.toString()</span><br><span class="line">return value.charAt(0).toUpperCase() + value.slice(1)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">// ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></code></pre><h3 id="组件过滤器（局部）"><a href="#组件过滤器（局部）" class="headerlink" title="组件过滤器（局部）"></a>组件过滤器（局部）</h3><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;status&quot;&gt;&#123;&#123;item.is_verify|prizeState&#125;&#125;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">//filters过滤器是和生命周期是同级的</span><br><span class="line">created()&#123;</span><br><span class="line">        this.getPrizeList()</span><br><span class="line">    &#125;,</span><br><span class="line">filters:&#123;</span><br><span class="line">        prizeState:function(val)&#123;//参数val就是上面的item.is_verify,花括号内的插值会是prizeState中return出来的数据</span><br><span class="line">            if(val==0)&#123;</span><br><span class="line">                return &apos;未使用&apos;</span><br><span class="line">            &#125;</span><br><span class="line">            if(val==1)&#123;</span><br><span class="line">                return &apos;已使用&apos;</span><br><span class="line">            &#125;</span><br><span class="line">            if(val==11)&#123;</span><br><span class="line">                return &apos;未开始&apos;</span><br><span class="line">            &#125;</span><br><span class="line">            if(val==12)&#123;</span><br><span class="line">                return &apos;已过期&apos;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure></code></pre><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><p>1、过滤器函数总接收表达式的值 (之前的操作链的结果) 作为第一个参数。在上述例子中，prizeState 过滤器函数将会收到 item.is_verify 的值作为第一个参数，插值的内容会变为prizeState函数return出去的数据</p><p>如上述例子，如果item.is_verify的值是1，插值就会是‘未使用’</p><p>2、过滤器可以串联<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; message | filterA | filterB &#125;&#125;</span><br></pre></td></tr></table></figure></p><p>上面的这个例子中filterA接收的参数是message，filterB接收的是filterA中return出来的结果</p><p>3、过滤器是 JavaScript 函数，因此可以接收参数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; message | filterA(参1, 参2) &#125;&#125;</span><br></pre></td></tr></table></figure></p><p>如上：filterA 被定义为接收三个参数的过滤器函数，第一个参数是message，剩下两个参数是传到filterA中的两参数</p><h3 id="注意：全局注册时是filter，没有s的。而组件过滤器是filters，是有s的。"><a href="#注意：全局注册时是filter，没有s的。而组件过滤器是filters，是有s的。" class="headerlink" title="注意：全局注册时是filter，没有s的。而组件过滤器是filters，是有s的。"></a>注意：全局注册时是filter，没有s的。而组件过滤器是filters，是有s的。</h3>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;过滤器&quot;&gt;&lt;a href=&quot;#过滤器&quot; class=&quot;headerlink&quot; title=&quot;过滤器&quot;&gt;&lt;/a&gt;过滤器&lt;/h3&gt;&lt;p&gt;Vue.js 允许你自定义过滤器，可被用于一些常见的文本格式化(比如在123后面加上abc,或者将一些状态值转为具体的描述：state=0显示‘已领取’等)。过滤器可以用在两个地方：双花括号插值和 v-bind 表达式&lt;br&gt;    &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;!-- 在双花括号中 --&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&amp;#123; message | capitalize &amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;!-- 在 `v-bind` 中 --&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;div v-bind:id=&amp;quot;rawId | formatId&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
</feed>
