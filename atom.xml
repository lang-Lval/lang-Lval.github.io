<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>紫气楠楠</title>
  <icon>https://www.gravatar.com/avatar/7124a429c575994ec398d35a1de49b3d</icon>
  <subtitle>记录点滴，分享世界</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-03-08T07:45:26.927Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Lval</name>
    <email>m1921219654@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>es6基础之函数的扩展</title>
    <link href="http://yoursite.com/2019/03/10/es6-3/"/>
    <id>http://yoursite.com/2019/03/10/es6-3/</id>
    <published>2019-03-10T06:53:51.000Z</published>
    <updated>2019-03-08T07:45:26.927Z</updated>
    
    <content type="html"><![CDATA[<h3 id="es6基础之字符串相关扩展"><a href="#es6基础之字符串相关扩展" class="headerlink" title="es6基础之字符串相关扩展"></a>es6基础之字符串相关扩展</h3><p>ES6 之前，不能直接为函数的参数指定默认值，只能采用变通的方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function log(x, y) &#123;</span><br><span class="line">  y = y || &apos;World&apos;;</span><br><span class="line">  console.log(x, y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">log(&apos;Hello&apos;) // Hello World</span><br><span class="line">log(&apos;Hello&apos;, &apos;China&apos;) // Hello China</span><br><span class="line">log(&apos;Hello&apos;, &apos;&apos;) // Hello World</span><br></pre></td></tr></table></figure></p><p>上面代码检查函数log的参数y有没有赋值，如果没有，则指定默认值为World。这种写法的缺点在于，如果参数y赋值了，但是对应的布尔值为false，则该赋值不起作用。就像上面代码的最后一行，参数y等于空字符，结果被改为默认值<br><a id="more"></a><br>ES6 允许为函数的参数设置默认值，即直接写在参数定义的后面<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function log(x, y = &apos;World&apos;) &#123;</span><br><span class="line">  console.log(x, y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">log(&apos;Hello&apos;) // Hello World</span><br><span class="line">log(&apos;Hello&apos;, &apos;China&apos;) // Hello China</span><br><span class="line">log(&apos;Hello&apos;, &apos;&apos;) // Hello</span><br></pre></td></tr></table></figure></p><p>注意：参数变量是默认声明的，所以不能用let或const再次声明。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function foo(x = 5) &#123;</span><br><span class="line">  let x = 1; // error</span><br><span class="line">  const x = 2; // error</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用参数默认值时，函数不能有同名参数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 不报错</span><br><span class="line">function foo(x, x, y) &#123;</span><br><span class="line">  // ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 报错</span><br><span class="line">function foo(x, x, y = 1) &#123;</span><br><span class="line">  // ...</span><br><span class="line">&#125;</span><br><span class="line">// SyntaxError: Duplicate parameter name not allowed in this context</span><br></pre></td></tr></table></figure></p><p>另外，一个容易忽略的地方是，参数默认值不是传值的，而是每次都重新计算默认值表达式的值。也就是说，参数默认值是惰性求值的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">let x = 99;</span><br><span class="line">function foo(p = x + 1) &#123;</span><br><span class="line">  console.log(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo() // 100</span><br><span class="line"></span><br><span class="line">x = 100;</span><br><span class="line">foo() // 101</span><br></pre></td></tr></table></figure></p><p>上面代码中，参数p的默认值是x + 1。这时，每次调用函数foo，都会重新计算x + 1，而不是默认p等于 100。</p><h3 id="rest参数"><a href="#rest参数" class="headerlink" title="rest参数"></a>rest参数</h3><p>ES6 引入 rest 参数（形式为…变量名），用于获取函数的多余参数，这样就不需要使用arguments对象了。rest 参数搭配的变量是一个数组，该变量将多余的参数放入数组中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function add(...values) &#123;</span><br><span class="line">  let sum = 0;</span><br><span class="line"></span><br><span class="line">  for (var val of values) &#123;</span><br><span class="line">    sum += val;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add(2, 5, 3) // 10</span><br></pre></td></tr></table></figure><p>上面代码的add函数是一个求和函数，利用 rest 参数，可以向该函数传入任意数目的参数。</p><p>arguments对象不是数组，而是一个类似数组的对象。所以为了使用数组的方法，必须使用Array.prototype.slice.call先将其转为数组。rest 参数就不存在这个问题，它就是一个真正的数组，数组特有的方法都可以使用。下面是一个利用 rest 参数改写数组push方法的例子<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function push(array, ...items) &#123;</span><br><span class="line">  items.forEach(function(item) &#123;</span><br><span class="line">    array.push(item);</span><br><span class="line">    console.log(item);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var a = [];</span><br><span class="line">push(a, 1, 2, 3)</span><br></pre></td></tr></table></figure></p><p>注意，rest 参数之后不能再有其他参数（即只能是最后一个参数），否则会报错。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 报错</span><br><span class="line">function f(a, ...b, c) &#123;</span><br><span class="line">  // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><p>ES6 允许使用“箭头”（=&gt;）定义函数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var f = v =&gt; v;</span><br><span class="line"></span><br><span class="line">// 等同于</span><br><span class="line">var f = function (v) &#123;</span><br><span class="line">  return v;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>如果箭头函数不需要参数或需要多个参数，就使用一个圆括号代表参数部分<br>如果箭头函数的代码块部分多于一条语句，就要使用大括号将它们括起来，并且使用return语句返回</p><p>如果箭头函数的代码块部分多于一条语句，就要使用大括号将它们括起来，并且使用return语句返回。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var sum = (num1, num2) =&gt; &#123; return num1 + num2; &#125;</span><br></pre></td></tr></table></figure></p><p>由于大括号被解释为代码块，所以如果箭头函数直接返回一个对象，必须在对象外面加上括号，否则会报错。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 报错</span><br><span class="line">let getTempItem = id =&gt; &#123; id: id, name: &quot;Temp&quot; &#125;;</span><br><span class="line"></span><br><span class="line">// 不报错</span><br><span class="line">let getTempItem = id =&gt; (&#123; id: id, name: &quot;Temp&quot; &#125;);</span><br></pre></td></tr></table></figure></p><p>下面是一种特殊情况，虽然可以运行，但会得到错误的结果。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let foo = () =&gt; &#123; a: 1 &#125;;</span><br><span class="line">foo() // undefined</span><br></pre></td></tr></table></figure></p><p>上面代码中，原始意图是返回一个对象{ a: 1 }，但是由于引擎认为大括号是代码块，所以执行了一行语句a: 1。这时，a可以被解释为语句的标签，因此实际执行的语句是1;，然后函数就结束了，没有返回值</p><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><p>（1）函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。</p><p>（2）不可以当作构造函数，也就是说，不可以使用new命令，否则会抛出一个错误。</p><p>（3）不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用 rest 参数代替。</p><p>（4）不可以使用yield命令，因此箭头函数不能用作 Generator 函数</p><p>上面四点中，第一点尤其值得注意。this对象的指向是可变的，但是在箭头函数中，它是固定的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function foo() &#123;</span><br><span class="line">  setTimeout(() =&gt; &#123;</span><br><span class="line">    console.log(&apos;id:&apos;, this.id);</span><br><span class="line">  &#125;, 100);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var id = 21;</span><br><span class="line"></span><br><span class="line">foo.call(&#123; id: 42 &#125;);</span><br><span class="line">// id: 42</span><br></pre></td></tr></table></figure><p>上面代码中，setTimeout的参数是一个箭头函数，这个箭头函数的定义生效是在foo函数生成时，而它的真正执行要等到 100 毫秒后。如果是普通函数，执行时this应该指向全局对象window，这时应该输出21。但是，箭头函数导致this总是指向函数定义生效时所在的对象（本例是{id: 42}），所以输出的是42</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;es6基础之字符串相关扩展&quot;&gt;&lt;a href=&quot;#es6基础之字符串相关扩展&quot; class=&quot;headerlink&quot; title=&quot;es6基础之字符串相关扩展&quot;&gt;&lt;/a&gt;es6基础之字符串相关扩展&lt;/h3&gt;&lt;p&gt;ES6 之前，不能直接为函数的参数指定默认值，只能采用变通的方法&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function log(x, y) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  y = y || &amp;apos;World&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  console.log(x, y);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;log(&amp;apos;Hello&amp;apos;) // Hello World&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;log(&amp;apos;Hello&amp;apos;, &amp;apos;China&amp;apos;) // Hello China&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;log(&amp;apos;Hello&amp;apos;, &amp;apos;&amp;apos;) // Hello World&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上面代码检查函数log的参数y有没有赋值，如果没有，则指定默认值为World。这种写法的缺点在于，如果参数y赋值了，但是对应的布尔值为false，则该赋值不起作用。就像上面代码的最后一行，参数y等于空字符，结果被改为默认值&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="es6" scheme="http://yoursite.com/categories/es6/"/>
    
    
      <category term="es6" scheme="http://yoursite.com/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>es6基础之字符串相关扩展</title>
    <link href="http://yoursite.com/2019/03/09/es6-2/"/>
    <id>http://yoursite.com/2019/03/09/es6-2/</id>
    <published>2019-03-09T06:26:48.000Z</published>
    <updated>2019-03-08T07:45:25.448Z</updated>
    
    <content type="html"><![CDATA[<h3 id="字符串的遍历器接口"><a href="#字符串的遍历器接口" class="headerlink" title="字符串的遍历器接口"></a>字符串的遍历器接口</h3><p>ES6 为字符串添加了遍历器接口（Iterator接口），使得字符串可以被for…of循环遍历<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">for (let num of &apos;foo&apos;) &#123;</span><br><span class="line">  console.log(num)</span><br><span class="line">&#125;</span><br><span class="line">// &quot;f&quot;</span><br><span class="line">// &quot;o&quot;</span><br><span class="line">// &quot;o&quot;</span><br></pre></td></tr></table></figure></p><h3 id="includes-startsWith-endsWith"><a href="#includes-startsWith-endsWith" class="headerlink" title="includes(), startsWith(), endsWith()"></a>includes(), startsWith(), endsWith()</h3><a id="more"></a><p>之前JavaScript 只有indexOf方法用来确定一个字符串是否包含在另一个字符串中，ES6 又提供了三种新方法。</p><p>includes()：返回布尔值，表示是否找到了参数字符串。<br>startsWith()：返回布尔值，表示参数字符串是否在原字符串的头部。<br>endsWith()：返回布尔值，表示参数字符串是否在原字符串的尾部。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let s = &apos;Hello world!&apos;;</span><br><span class="line"></span><br><span class="line">s.startsWith(&apos;Hello&apos;) // true</span><br><span class="line">s.endsWith(&apos;!&apos;) // true</span><br><span class="line">s.includes(&apos;o&apos;) // true</span><br></pre></td></tr></table></figure></p><p>这三个方法都支持第二个参数，表示开始搜索的位置。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let s = &apos;Hello world!&apos;;</span><br><span class="line"></span><br><span class="line">s.startsWith(&apos;world&apos;, 6) // true</span><br><span class="line">s.endsWith(&apos;Hello&apos;, 5) // true</span><br><span class="line">s.includes(&apos;Hello&apos;, 6) // false</span><br></pre></td></tr></table></figure></p><p>上面代码表示，使用第二个参数n时，endsWith的行为与其他两个方法有所不同。它针对前n个字符，而其他两个方法针对从第n个位置直到字符串结束。</p><h3 id="repeat"><a href="#repeat" class="headerlink" title="repeat()"></a>repeat()</h3><p>repeat方法返回一个新字符串，表示将原字符串重复n次。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&apos;x&apos;.repeat(3) // &quot;xxx&quot;</span><br><span class="line">&apos;hello&apos;.repeat(2) // &quot;hellohello&quot;</span><br><span class="line">&apos;na&apos;.repeat(0) // &quot;&quot;</span><br></pre></td></tr></table></figure></p><p>参数如果是小数，会被取整<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;na&apos;.repeat(2.9) // &quot;nana&quot;</span><br></pre></td></tr></table></figure></p><p>如果repeat的参数是负数或者Infinity，会报错。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&apos;na&apos;.repeat(Infinity)</span><br><span class="line">// RangeError</span><br><span class="line">&apos;na&apos;.repeat(-1)</span><br><span class="line">// RangeError</span><br></pre></td></tr></table></figure></p><p>如果参数是 0 到-1 之间的小数，则等同于 0，这是因为会先进行取整运算。0 到-1 之间的小数，取整以后等于-0，repeat视同为 0<br>参数NaN等同于 0。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;na&apos;.repeat(-0.9) // &quot;&quot;</span><br></pre></td></tr></table></figure></p><p>参数是字符串，则会先转换成数字<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&apos;na&apos;.repeat(&apos;na&apos;) // &quot;&quot;</span><br><span class="line">&apos;na&apos;.repeat(&apos;3&apos;) // &quot;nanana&quot;</span><br></pre></td></tr></table></figure></p><h3 id="padStart-，padEnd"><a href="#padStart-，padEnd" class="headerlink" title="padStart()，padEnd()"></a>padStart()，padEnd()</h3><p>ES2017 引入了字符串补全长度的功能。如果某个字符串不够指定长度，会在头部或尾部补全。padStart()用于头部补全，padEnd()用于尾部补全。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&apos;x&apos;.padStart(5, &apos;ab&apos;) // &apos;ababx&apos;</span><br><span class="line">&apos;x&apos;.padStart(4, &apos;ab&apos;) // &apos;abax&apos;</span><br><span class="line"></span><br><span class="line">&apos;x&apos;.padEnd(5, &apos;ab&apos;) // &apos;xabab&apos;</span><br><span class="line">&apos;x&apos;.padEnd(4, &apos;ab&apos;) // &apos;xaba&apos;</span><br></pre></td></tr></table></figure></p><p>上面代码中，padStart()和padEnd()一共接受两个参数，第一个参数是字符串补全生效的最大长度，第二个参数是用来补全的字符串。</p><p>如果原字符串的长度，等于或大于最大长度，则字符串补全不生效，返回原字符串<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&apos;xxx&apos;.padStart(2, &apos;ab&apos;) // &apos;xxx&apos;</span><br><span class="line">&apos;xxx&apos;.padEnd(2, &apos;ab&apos;) // &apos;xxx&apos;</span><br></pre></td></tr></table></figure></p><p>如果用来补全的字符串与原字符串，两者的长度之和超过了最大长度，则会截去超出位数的补全字符串<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&apos;abc&apos;.padStart(10, &apos;0123456789&apos;)</span><br><span class="line">// &apos;0123456abc&apos;</span><br></pre></td></tr></table></figure></p><p>如果省略第二个参数，默认使用空格补全长度。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&apos;x&apos;.padStart(4) // &apos;   x&apos;</span><br><span class="line">&apos;x&apos;.padEnd(4) // &apos;x   &apos;</span><br></pre></td></tr></table></figure></p><p>padStart()的常见用途是为数值补全指定位数。下面代码生成 10 位的数值字符串<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&apos;1&apos;.padStart(10, &apos;0&apos;) // &quot;0000000001&quot;</span><br><span class="line">&apos;12&apos;.padStart(10, &apos;0&apos;) // &quot;0000000012&quot;</span><br><span class="line">&apos;123456&apos;.padStart(10, &apos;0&apos;) // &quot;0000123456&quot;</span><br></pre></td></tr></table></figure></p><p>另一个用途是提示字符串格式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&apos;12&apos;.padStart(10, &apos;YYYY-MM-DD&apos;) // &quot;YYYY-MM-12&quot;</span><br><span class="line">&apos;09-12&apos;.padStart(10, &apos;YYYY-MM-DD&apos;) // &quot;YYYY-09-12&quot;</span><br></pre></td></tr></table></figure><h3 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h3><p>传统的输出模板常为字符串拼接，这种写法相当繁琐和不简洁，ES6 引入了模板字符串解决这个问题<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(&apos;#result&apos;).append(`</span><br><span class="line">  There are &lt;b&gt;$&#123;basket.count&#125;&lt;/b&gt; items</span><br><span class="line">   in your basket, &lt;em&gt;$&#123;basket.onSale&#125;&lt;/em&gt;</span><br><span class="line">  are on sale!</span><br><span class="line">`);</span><br></pre></td></tr></table></figure></p><p>模板字符串（template string）是增强版的字符串，用反引号（`）标识。它可以当作普通字符串使用，也可以用来定义多行字符串，或者在字符串中嵌入变量,模板字符串中嵌入变量，需要将变量名写在${}之中。</p><p>如果在模板字符串中需要使用反引号，则前面要用反斜杠转义。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let greeting = `\`Yo\` World!`;</span><br></pre></td></tr></table></figure><p>使用模板字符串表示多行字符串，所有的空格和缩进都会被保留在输出之中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(&apos;#list&apos;).html(`</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;li&gt;first&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;second&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">`);</span><br></pre></td></tr></table></figure><p>所有模板字符串的空格和换行，都是被保留的，比如<ul>标签前面会有一个换行。如果你不想要这个换行，可以使用trim方法消除它。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(&apos;#list&apos;).html(`</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;li&gt;first&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;second&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">`.trim());</span><br></pre></td></tr></table></figure></ul></p><p>${}大括号内部可以放入任意的 JavaScript 表达式，可以进行运算，以及引用对象属性。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">`$&#123;x&#125; + $&#123;y * 2&#125; = $&#123;x + y * 2&#125;`</span><br><span class="line">// &quot;1 + 4 = 5&quot;</span><br><span class="line"></span><br><span class="line">let obj = &#123;x: 1, y: 2&#125;;</span><br><span class="line">`$&#123;obj.x + obj.y&#125;`</span><br><span class="line">// &quot;3&quot;</span><br></pre></td></tr></table></figure></p><p>模板字符串之中还能调用函数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function fn() &#123;</span><br><span class="line">  return &quot;Hello World&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">`foo $&#123;fn()&#125; bar`</span><br><span class="line">// foo Hello World bar</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;字符串的遍历器接口&quot;&gt;&lt;a href=&quot;#字符串的遍历器接口&quot; class=&quot;headerlink&quot; title=&quot;字符串的遍历器接口&quot;&gt;&lt;/a&gt;字符串的遍历器接口&lt;/h3&gt;&lt;p&gt;ES6 为字符串添加了遍历器接口（Iterator接口），使得字符串可以被for…of循环遍历&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;for (let num of &amp;apos;foo&amp;apos;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  console.log(num)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// &amp;quot;f&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// &amp;quot;o&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// &amp;quot;o&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;includes-startsWith-endsWith&quot;&gt;&lt;a href=&quot;#includes-startsWith-endsWith&quot; class=&quot;headerlink&quot; title=&quot;includes(), startsWith(), endsWith()&quot;&gt;&lt;/a&gt;includes(), startsWith(), endsWith()&lt;/h3&gt;
    
    </summary>
    
      <category term="es6" scheme="http://yoursite.com/categories/es6/"/>
    
    
      <category term="es6" scheme="http://yoursite.com/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>es6基础之变量的解构赋值</title>
    <link href="http://yoursite.com/2019/03/08/es6-1/"/>
    <id>http://yoursite.com/2019/03/08/es6-1/</id>
    <published>2019-03-08T05:50:19.000Z</published>
    <updated>2019-03-08T07:45:23.463Z</updated>
    
    <content type="html"><![CDATA[<h3 id="数组的解构赋值"><a href="#数组的解构赋值" class="headerlink" title="数组的解构赋值"></a>数组的解构赋值</h3><p>概念：ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值<br>基本用法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let [a, b, c] = [1, 2, 3];</span><br></pre></td></tr></table></figure></p><p>上面代码表示，可以从数组中提取值，按照对应位置，对变量赋值,也就是说，只要两边的模式相同，左边的变量就会对应赋为右边的值<br><a id="more"></a><br>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">let [a, [[b], c]] = [1, [[2], 3]];</span><br><span class="line">a // 1</span><br><span class="line">b// 2</span><br><span class="line">c // 3</span><br><span class="line"></span><br><span class="line">let [ , , str] = [&quot;foo&quot;, &quot;bar&quot;, &quot;baz&quot;];</span><br><span class="line">str // &quot;baz&quot;</span><br><span class="line"></span><br><span class="line">let [x, , y] = [1, 2, 3];</span><br><span class="line">x // 1</span><br><span class="line">y // 3</span><br><span class="line"></span><br><span class="line">let [fir, ...sce] = [1, 2, 3, 4];</span><br><span class="line">fir // 1</span><br><span class="line">sce // [2, 3, 4]</span><br></pre></td></tr></table></figure></p><p>如果解构不成功，变量的值就等于undefined。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let [foo] = [];</span><br><span class="line">let [bar, foo] = [1];</span><br></pre></td></tr></table></figure></p><p>以上两种情况都属于解构不成功，foo的值都会等于undefined。</p><p>另一种情况是不完全解构，即等号左边的模式，只匹配一部分的等号右边的数组。这种情况下，解构依然可以成功<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let [x, y] = [1, 2, 3];</span><br><span class="line">x // 1</span><br><span class="line">y // 2</span><br><span class="line"></span><br><span class="line">let [a, [b], d] = [1, [2, 3], 4];</span><br><span class="line">a // 1</span><br><span class="line">b // 2</span><br><span class="line">d // 4</span><br></pre></td></tr></table></figure></p><h4 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h4><p>解构赋值允许指定默认值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let [foo = true] = [];</span><br><span class="line">foo // true</span><br><span class="line"></span><br><span class="line">let [x, y = &apos;b&apos;] = [&apos;a&apos;]; // x=&apos;a&apos;, y=&apos;b&apos;</span><br><span class="line">let [x, y = &apos;b&apos;] = [&apos;a&apos;, undefined]; // x=&apos;a&apos;, y=&apos;b&apos;</span><br></pre></td></tr></table></figure></p><p>注意，ES6 内部使用严格相等运算符（===），判断一个位置是否有值</p><h3 id="对象的解构赋值"><a href="#对象的解构赋值" class="headerlink" title="对象的解构赋值"></a>对象的解构赋值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let &#123; foo, bar &#125; = &#123; foo: &quot;aaa&quot;, bar: &quot;bbb&quot; &#125;;</span><br><span class="line">foo // &quot;aaa&quot;</span><br><span class="line">bar // &quot;bbb&quot;</span><br></pre></td></tr></table></figure><p>对象解构赋值时变量必须与属性同名，才能取到正确的值<br>数组的元素是按次序排列的，变量的取值由它的位置决定。而对象不用受位置限制</p><p>上面代码的第一个例子，等号左边的两个变量的次序，与等号右边两个同名属性的次序不一致，但是对取值完全没有影响。第二个例子的变量没有对应的同名属性，导致取不到值，最后等于undefined。</p><p>如果变量名与属性名不一致，必须写成下面这样。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let &#123; foo: baz &#125; = &#123; foo: &apos;aaa&apos;, bar: &apos;bbb&apos; &#125;;</span><br><span class="line">baz // &quot;aaa&quot;</span><br><span class="line"></span><br><span class="line">let obj = &#123; first: &apos;hello&apos;, last: &apos;world&apos; &#125;;</span><br><span class="line">let &#123; first: f, last: l &#125; = obj;</span><br><span class="line">f // &apos;hello&apos;</span><br><span class="line">l // &apos;world&apos;</span><br></pre></td></tr></table></figure></p><p>对象的解构赋值的内部机制，是先找到同名属性，然后再赋给对应的变量。真正被赋值的是后者，而不是前者<br>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let &#123; foo: baz &#125; = &#123; foo: &quot;aaa&quot;, bar: &quot;bbb&quot; &#125;;</span><br><span class="line">baz // &quot;aaa&quot;</span><br><span class="line">foo // error: foo is not defined</span><br></pre></td></tr></table></figure></p><p>上面代码中，foo是匹配的模式，baz才是变量。真正被赋值的是变量baz，而不是模式foo。</p><h3 id="解构赋值的用途"><a href="#解构赋值的用途" class="headerlink" title="解构赋值的用途"></a>解构赋值的用途</h3><ol><li><p>交换变量的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let x = 1;</span><br><span class="line">let y = 2;</span><br><span class="line"></span><br><span class="line">[x, y] = [y, x];//x：2 y:1</span><br></pre></td></tr></table></figure></li><li><p>函数返回多个值<br>函数只能返回一个值，如果要返回多个值，只能将它们放在数组或对象里返回。有了解构赋值，取出这些值就非常方便</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function example() &#123;</span><br><span class="line">  return [1, 2, 3];</span><br><span class="line">&#125;</span><br><span class="line">let [a, b, c] = example();</span><br><span class="line"></span><br><span class="line">// 返回一个对象</span><br><span class="line"></span><br><span class="line">function example() &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    foo: 1,</span><br><span class="line">    bar: 2</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line">let &#123; foo, bar &#125; = example();</span><br></pre></td></tr></table></figure></li><li><p>函数参数的定义<br>解构赋值可以方便地将一组参数与变量名对应起来。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 参数是一组有次序的值</span><br><span class="line">function f([x, y, z]) &#123; ... &#125;</span><br><span class="line">f([1, 2, 3]);</span><br><span class="line"></span><br><span class="line">// 参数是一组无次序的值</span><br><span class="line">function f(&#123;x, y, z&#125;) &#123; ... &#125;</span><br><span class="line">f(&#123;z: 3, y: 2, x: 1&#125;);</span><br></pre></td></tr></table></figure></li><li><p>提取 JSON 数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">let jsonData = &#123;</span><br><span class="line">  id: 42,</span><br><span class="line">  status: &quot;OK&quot;,</span><br><span class="line">  data: [867, 5309]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">let &#123; id, status, data: number &#125; = jsonData;</span><br><span class="line"></span><br><span class="line">console.log(id, status, number);</span><br><span class="line">// 42, &quot;OK&quot;, [867, 5309]</span><br></pre></td></tr></table></figure></li></ol><p>上面代码可以快速提取 JSON 数据的值。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;数组的解构赋值&quot;&gt;&lt;a href=&quot;#数组的解构赋值&quot; class=&quot;headerlink&quot; title=&quot;数组的解构赋值&quot;&gt;&lt;/a&gt;数组的解构赋值&lt;/h3&gt;&lt;p&gt;概念：ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值&lt;br&gt;基本用法：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;let [a, b, c] = [1, 2, 3];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上面代码表示，可以从数组中提取值，按照对应位置，对变量赋值,也就是说，只要两边的模式相同，左边的变量就会对应赋为右边的值&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="es6" scheme="http://yoursite.com/categories/es6/"/>
    
    
      <category term="es6" scheme="http://yoursite.com/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>hexo文章中插入图片问题</title>
    <link href="http://yoursite.com/2019/03/04/img/"/>
    <id>http://yoursite.com/2019/03/04/img/</id>
    <published>2019-03-04T06:26:42.000Z</published>
    <updated>2019-03-04T09:45:47.894Z</updated>
    
    <content type="html"><![CDATA[<h3 id="hexo内本地图片直接引入无法显示问题"><a href="#hexo内本地图片直接引入无法显示问题" class="headerlink" title="hexo内本地图片直接引入无法显示问题"></a>hexo内本地图片直接引入无法显示问题</h3><ol><li>把主页配置文件_config.yml 里的post_asset_folder:这个选项设置为true</li><li>在根目录下输入npm install hexo-asset-image –save，这是下载安装一个可以上传本地图片的插件</li><li>再运行hexo new “xxxx”来生成md博文时，/source/_posts文件夹内除了xxxx.md文件还有一个同名的文件夹</li><li>最后在xxxx.md中想引入图片时，先把图片复制到xxxx这个文件夹中，然后只需要在xxxx.md中按照markdown的格式引入图片即可</li></ol><p>如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//![你想输入的替代文字](xxxx/图片名.jpg)</span><br></pre></td></tr></table></figure></p><ol start="5"><li>hexo d 上传后就能看到图片了</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;hexo内本地图片直接引入无法显示问题&quot;&gt;&lt;a href=&quot;#hexo内本地图片直接引入无法显示问题&quot; class=&quot;headerlink&quot; title=&quot;hexo内本地图片直接引入无法显示问题&quot;&gt;&lt;/a&gt;hexo内本地图片直接引入无法显示问题&lt;/h3&gt;&lt;ol&gt;

      
    
    </summary>
    
      <category term="主题相关" scheme="http://yoursite.com/categories/%E4%B8%BB%E9%A2%98%E7%9B%B8%E5%85%B3/"/>
    
    
  </entry>
  
  <entry>
    <title>hexo添加live2d看板动画</title>
    <link href="http://yoursite.com/2019/03/04/live2d/"/>
    <id>http://yoursite.com/2019/03/04/live2d/</id>
    <published>2019-03-04T05:53:58.000Z</published>
    <updated>2019-03-04T09:50:45.922Z</updated>
    
    <content type="html"><![CDATA[<h3 id="hexo的next主题添加看板动画"><a href="#hexo的next主题添加看板动画" class="headerlink" title="hexo的next主题添加看板动画"></a>hexo的next主题添加看板动画</h3><ol><li>git定位到根目录文件，并输入以下命令<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure></li></ol><a id="more"></a><ol start="2"><li><p>下载各种模型：npm install + 模型名 (npm install live2d-widget-model-shizuku)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">live2d-widget-model-chitose</span><br><span class="line">live2d-widget-model-epsilon2_1</span><br><span class="line">live2d-widget-model-gf</span><br><span class="line"></span><br><span class="line">live2d-widget-model-haru/01 (use npm install --save live2d-widget-model-haru)</span><br><span class="line"></span><br><span class="line">live2d-widget-model-haru/02 (use npm install --save live2d-widget-model-haru)</span><br><span class="line">live2d-widget-model-haruto</span><br><span class="line">live2d-widget-model-hibiki</span><br><span class="line">live2d-widget-model-hijiki</span><br><span class="line">live2d-widget-model-izumi</span><br><span class="line">live2d-widget-model-koharu</span><br><span class="line">live2d-widget-model-miku</span><br><span class="line">live2d-widget-model-ni-j</span><br><span class="line">live2d-widget-model-nico</span><br><span class="line">live2d-widget-model-niet</span><br></pre></td></tr></table></figure></li><li><p>此时再去 node_moduels目录下，可以看到有如下文件夹，这些都是动画主配置<br><img src="/2019/03/04/live2d/01.png" alt="zi"></p></li><li>在Hexo根目录中新建文件夹live2d_models，然后在node_modules文件夹中找到刚刚下载的live2d模型，将其复制到live2d_models中</li><li><p>hexo的配置文件_config.yml中添加如下配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#2d</span><br><span class="line">live2d:</span><br><span class="line">  enable: true</span><br><span class="line">  scriptFrom: local</span><br><span class="line">  pluginRootPath: live2dw/</span><br><span class="line">  pluginJsPath: lib/</span><br><span class="line">  pluginModelPath: assets/</span><br><span class="line">  tagMode: false</span><br><span class="line">  debug: false</span><br><span class="line">  model:</span><br><span class="line">    use: live2d-widget-model-shizuku</span><br><span class="line">  display:</span><br><span class="line">    position: left</span><br><span class="line">    width: 120</span><br><span class="line">    height: 240</span><br><span class="line">  mobile:</span><br><span class="line">    show: false</span><br></pre></td></tr></table></figure></li><li><p>配置博客站点配置文件，_config.yml将里面的use:换成下载的模型名称</p></li><li><p>hexo d上传后就会在右下角出现live2d动画了</p></li><li><p>取消看板动画<br>直接运行npm uninstall hexo-helper-live2d<br>去掉站点_config.yml下的配置信息即可</p></li></ol><h3 id="添加live2d直接引入版（这个是github上人家的api，也许会在哪天失效）"><a href="#添加live2d直接引入版（这个是github上人家的api，也许会在哪天失效）" class="headerlink" title="添加live2d直接引入版（这个是github上人家的api，也许会在哪天失效）"></a>添加live2d直接引入版（这个是github上人家的api，也许会在哪天失效）</h3><p>不想配置的话，直接在next/layout/_layout.swig(生成主页面的文件)中引入下面文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//将代码加入&lt;head&gt;或&lt;body&gt;，就可以看到效果了</span><br><span class="line">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/jquery/dist/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/font-awesome/css/font-awesome.min.css&quot;/&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.jsdelivr.net/gh/stevenjoezhang/live2d-widget/autoload.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>此配置来自github上大佬的资源，<a href="https://github.com/stevenjoezhang/live2d-widget" target="_blank" rel="noopener">附上大佬的github地址</a><br>这是人家的一个api，也许哪天挂了呢？如果想一直使用要拷贝到自己的服务器中，并搭建php环境，<a href="https://github.com/fghrsh/live2d_api" target="_blank" rel="noopener">api的github地址</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;hexo的next主题添加看板动画&quot;&gt;&lt;a href=&quot;#hexo的next主题添加看板动画&quot; class=&quot;headerlink&quot; title=&quot;hexo的next主题添加看板动画&quot;&gt;&lt;/a&gt;hexo的next主题添加看板动画&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;git定位到根目录文件，并输入以下命令&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install --save hexo-helper-live2d&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="主题相关" scheme="http://yoursite.com/categories/%E4%B8%BB%E9%A2%98%E7%9B%B8%E5%85%B3/"/>
    
    
  </entry>
  
  <entry>
    <title>vuex的相关使用</title>
    <link href="http://yoursite.com/2019/03/01/vuex/"/>
    <id>http://yoursite.com/2019/03/01/vuex/</id>
    <published>2019-03-01T08:13:25.000Z</published>
    <updated>2019-03-01T09:24:30.035Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/langhuonan/wechat/master/mdImages/day1/1.jpg" alt="avatar"></p><h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><p>单独建一个store文件夹，用来管理store的状态<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &apos;vue&apos;</span><br><span class="line">import Vuex from &apos;vuex&apos;</span><br><span class="line">import &apos;es6-promise/auto&apos;</span><br><span class="line">import axios from &apos;axios&apos;</span><br><span class="line">Vue.use(Vuex)</span><br></pre></td></tr></table></figure></p><h3 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h3><a id="more"></a><ol><li>store（仓库）：“store”基本上就是一个容器，它包含着你的应用中大部分的状态 (state)<br>store 中的状态不能直接修改，改变 store 中的状态的唯一途径就是显式地提交 (commit) <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const state = &#123;</span><br><span class="line">  uuid: &apos;&apos;,</span><br><span class="line">  user: &#123;&#125;,</span><br><span class="line">  qrCode:&apos;&apos;,</span><br><span class="line">  qrCodeUser:&#123;&#125;,</span><br><span class="line">  prizeQrCode:&apos;&apos;,</span><br><span class="line">  prizeQrCodeUser:&#123;&#125;,</span><br><span class="line">  errorMsg:&apos;&apos;,</span><br><span class="line">&#125;</span><br><span class="line">$store.commit(&apos;setQrCode&apos;,&apos;e1dddec9&apos;)//setQrCode是要修改的state内的状态，e1dddec9是修改为的数据，可以是一个对象</span><br></pre></td></tr></table></figure></li></ol><p>2.getter（可以认为是 store 的计算属性）：就像计算属性一样，getter 的返回值会根据它的依赖被缓存起来，且只有当它的依赖值发生了改变才会被重新计算<br>Getter 接受 state 作为其第一个参数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">const getters = &#123;</span><br><span class="line">  // 将数据从cache中取出</span><br><span class="line">  getCache: function (state) &#123;</span><br><span class="line">    return function (key) &#123;</span><br><span class="line">      var cache_data = localStorage.getItem(key)</span><br><span class="line">      if (!cache_data) &#123;</span><br><span class="line">        return null</span><br><span class="line">      &#125;</span><br><span class="line">      // var data = JSON.parse(Base64.decode(cache_data))</span><br><span class="line">      var data = JSON.parse(cache_data)</span><br><span class="line">      if (data.timeout === 0 || data.timeout &gt; (new Date()).getTime()) &#123;</span><br><span class="line">        return data.data</span><br><span class="line">      &#125;</span><br><span class="line">      localStorage.removeItem(key)</span><br><span class="line">      return null</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  getUUID: function () &#123;</span><br><span class="line">    return state.uuid</span><br><span class="line">  &#125;,</span><br><span class="line">  getAdminUserInfo: function () &#123;</span><br><span class="line">    return state.user</span><br><span class="line">  &#125;,</span><br><span class="line">  getQrCode:function () &#123;</span><br><span class="line">    return state.qrCode</span><br><span class="line">  &#125;,</span><br><span class="line">  getQrCodeUserInfo:function () &#123;</span><br><span class="line">  return state.qrCodeUser</span><br><span class="line">  &#125;,</span><br><span class="line">getPrizeQrCode:function () &#123;</span><br><span class="line">return state.prizeQrCode</span><br><span class="line">&#125;,</span><br><span class="line">getPrizeQrCodeUserInfo:function () &#123;</span><br><span class="line">return state.prizeQrCodeUser</span><br><span class="line">&#125;,</span><br><span class="line">  getErrMsg:function () &#123;</span><br><span class="line">  return state.errorMsg</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在任意组件的计算属性中可以获取getters内函数的返回值<br>如：获取上面计算属性中的UID<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">computed:&#123;</span><br><span class="line">uid:function () &#123;</span><br><span class="line">return this.$store.getters[&apos;getUUID&apos;];</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>3.Mutation<br>更改 Vuex 的 store 中的状态的唯一方法是提交 mutation。Vuex 中的 mutation 非常类似于事件：每个 mutation 都有一个字符串的 事件类型 (type) 和 一个 回调函数 (handler)。这个回调函数就是我们实际进行状态更改的地方，并且它会接受 state 作为第一个参数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">//第一个参数为state状态对象，第二个参数Payload载荷（也就是要修改为的数据）</span><br><span class="line">const mutations = &#123;</span><br><span class="line">  // 将数据存储到cache中</span><br><span class="line">  setCache: function (state, data) &#123;</span><br><span class="line">    if (data.timeout === undefined) &#123;</span><br><span class="line">      data.timeout = 30 * 24 * 3600 * 1000</span><br><span class="line">    &#125;</span><br><span class="line">    var obj = &#123;</span><br><span class="line">      data: data.value,</span><br><span class="line">      timeout: data.timeout + (new Date()).getTime()</span><br><span class="line">    &#125;</span><br><span class="line">    // var cache = Base64.encode(JSON.stringify(obj));</span><br><span class="line">    var cache = JSON.stringify(obj)</span><br><span class="line">    localStorage.setItem(data.key, cache)</span><br><span class="line">  &#125;,</span><br><span class="line">  clearCache: function (state, key) &#123;</span><br><span class="line">    localStorage.removeItem(key)</span><br><span class="line">  &#125;,</span><br><span class="line">  setAdminUserInfo (state, data) &#123;</span><br><span class="line">    state.user = data</span><br><span class="line">  &#125;,</span><br><span class="line">  setQrCodeUserInfo(state,data)&#123;</span><br><span class="line">  state.qrCodeUser = data;</span><br><span class="line">  &#125;,</span><br><span class="line">  setQrCode(state,data)&#123;</span><br><span class="line">  state.qrCode = data;</span><br><span class="line">  &#125;,</span><br><span class="line">setPrizeQrCodeUserInfo(state,data)&#123;</span><br><span class="line">state.prizeQrCodeUser = data;</span><br><span class="line">&#125;,</span><br><span class="line">setPrizeQrCode(state,data)&#123;</span><br><span class="line">state.prizeQrCode = data;</span><br><span class="line">&#125;,</span><br><span class="line">  setErrMsg(state,data)&#123;</span><br><span class="line">  state.errorMsg = data</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在组件中提交 Mutation（提交载荷）<br>在组件中使用 this.$store.commit(‘xxx’) 提交 mutation<br>如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">getQrcodeInfo:function (code) &#123;</span><br><span class="line">          let self = this;</span><br><span class="line">this.$http(&#123;</span><br><span class="line">methods:&apos;get&apos;,</span><br><span class="line">url:&apos;/mfw/xiaoliwu/backend/Login/showCodeInfo&apos;,</span><br><span class="line">params:&#123;</span><br><span class="line">uid:this.uid,</span><br><span class="line">code:code</span><br><span class="line">&#125;</span><br><span class="line">&#125;).then(res=&gt;&#123;</span><br><span class="line">console.log(res)</span><br><span class="line">if(res.data.code === 0)&#123;</span><br><span class="line">self.$store.commit(&apos;setQrCodeUserInfo&apos;,res.data.data)//此处就是提交上面mutation内的setQrCodeUserInfo函数，这个函数的第二个参数就是上面的data</span><br><span class="line">this.$router.push(&#123;</span><br><span class="line">path:&apos;/convert&apos;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;else &#123;</span><br><span class="line">self.$vux.alert.show(&#123;</span><br><span class="line">title: &apos;&apos;,</span><br><span class="line">content: res.data.msg,</span><br><span class="line">buttonText:&apos;知道了&apos;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><ol start="4"><li>Action<br>Action 类似于 mutation，不同在于：</li></ol><p>Action 提交的是 mutation，而不是直接变更状态。<br>Action 可以包含任意异步操作。</p><ol start="5"><li>Module<br>由于使用单一状态树，应用的所有状态会集中到一个比较大的对象。当应用变得非常复杂时，store 对象就有可能变得相当臃肿</li></ol><p>为了解决以上问题，Vuex 允许我们将 store 分割成模块（module）。每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块——从上至下进行同样方式的分割：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">const moduleA = &#123;</span><br><span class="line">  state: &#123; ... &#125;,</span><br><span class="line">  mutations: &#123; ... &#125;,</span><br><span class="line">  actions: &#123; ... &#125;,</span><br><span class="line">  getters: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const moduleB = &#123;</span><br><span class="line">  state: &#123; ... &#125;,</span><br><span class="line">  mutations: &#123; ... &#125;,</span><br><span class="line">  actions: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const store = new Vuex.Store(&#123;</span><br><span class="line">  modules: &#123;</span><br><span class="line">    a: moduleA,</span><br><span class="line">    b: moduleB</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">store.state.a // -&gt; moduleA 的状态</span><br><span class="line">store.state.b // -&gt; moduleB 的状态</span><br></pre></td></tr></table></figure></p><p>模块的局部状态<br>对于模块内部的 mutation 和 getter，接收的第一个参数是模块的局部状态对象。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">const moduleA = &#123;</span><br><span class="line">  state: &#123; count: 0 &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    increment (state) &#123;</span><br><span class="line">      // 这里的 `state` 对象是模块的局部状态</span><br><span class="line">      state.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  getters: &#123;</span><br><span class="line">    doubleCount (state) &#123;</span><br><span class="line">      return state.count * 2</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>同样，对于模块内部的 action，局部状态通过 context.state 暴露出来，根节点状态则为 context.rootState：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const moduleA = &#123;</span><br><span class="line">  // ...</span><br><span class="line">  actions: &#123;</span><br><span class="line">    incrementIfOddOnRootSum (&#123; state, commit, rootState &#125;) &#123;</span><br><span class="line">      if ((state.count + rootState.count) % 2 === 1) &#123;</span><br><span class="line">        commit(&apos;increment&apos;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>对于模块内部的 getter，根节点状态会作为第三个参数暴露出来：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const moduleA = &#123;</span><br><span class="line">  // ...</span><br><span class="line">  getters: &#123;</span><br><span class="line">    sumWithRootCount (state, getters, rootState) &#123;</span><br><span class="line">      return state.count + rootState.count</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h3><p>将上面的以常量形式声明的各个核心导出，就可以在任意组件中调用了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export default new Vuex.Store(&#123;</span><br><span class="line">  state, getters, mutations, actions</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/langhuonan/wechat/master/mdImages/day1/1.jpg&quot; alt=&quot;avatar&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;引入&quot;&gt;&lt;a href=&quot;#引入&quot; class=&quot;headerlink&quot; title=&quot;引入&quot;&gt;&lt;/a&gt;引入&lt;/h3&gt;&lt;p&gt;单独建一个store文件夹，用来管理store的状态&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import Vue from &amp;apos;vue&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import Vuex from &amp;apos;vuex&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import &amp;apos;es6-promise/auto&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import axios from &amp;apos;axios&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Vue.use(Vuex)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;核心概念&quot;&gt;&lt;a href=&quot;#核心概念&quot; class=&quot;headerlink&quot; title=&quot;核心概念&quot;&gt;&lt;/a&gt;核心概念&lt;/h3&gt;
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
    
  </entry>
  
  <entry>
    <title>微信jssdk的接入（分享及扫码功能）</title>
    <link href="http://yoursite.com/2019/03/01/sdk/"/>
    <id>http://yoursite.com/2019/03/01/sdk/</id>
    <published>2019-03-01T07:43:06.000Z</published>
    <updated>2019-03-01T08:17:18.886Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/langhuonan/wechat/master/mdImages/day1/1.jpg" alt="avatar"></p><h3 id="vue中使用（vux版）"><a href="#vue中使用（vux版）" class="headerlink" title="vue中使用（vux版）"></a>vue中使用（vux版）</h3><h4 id="微信扫一扫功能"><a href="#微信扫一扫功能" class="headerlink" title="微信扫一扫功能"></a>微信扫一扫功能</h4><p>分享接口只有认证公众号才能使用，域名必须备案且在微信后台设置。<br><a id="more"></a><br>先确认已经满足使用jssdk的要求再进行开发。<br>1.引入vux类库<br>2.在 main.js 中全局引入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import &#123; WechatPlugin &#125; from &apos;vux&apos;</span><br><span class="line">Vue.use(WechatPlugin)</span><br><span class="line"></span><br><span class="line">console.log(Vue.wechat) // 可以直接访问 wx 对象。</span><br></pre></td></tr></table></figure></p><p>3.全局引入后就可以在任意组件内调用了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">self.$wechat.scanQRCode(&#123;</span><br><span class="line">needResult: 1, // 默认为0，扫描结果由微信处理，1则直接返回扫描结果，</span><br><span class="line">scanType: [&quot;qrCode&quot;], // 可以指定扫二维码还是一维码，默认二者都有</span><br><span class="line">success: function (res) &#123;</span><br><span class="line">self.$vux.loading.hide();</span><br><span class="line">var result = res.resultStr; // 当needResult 为 1 时，扫码返回的结果</span><br><span class="line">if (result)&#123;</span><br><span class="line">self.$store.commit(&apos;setQrCode&apos;,result);</span><br><span class="line">self.getQrcodeInfo(result)</span><br><span class="line">&#125;else &#123;</span><br><span class="line">self.$vux.alert.show(&#123;</span><br><span class="line">content:&apos;未识别的兑换码&apos;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>附录：<a href="https://mp.weixin.qq.com/wiki?" target="_blank" rel="noopener">微信js-sdk说明文档</a></p><h3 id="jquery中使用sdk"><a href="#jquery中使用sdk" class="headerlink" title="jquery中使用sdk"></a>jquery中使用sdk</h3><p>1.在需要调用JS接口的页面引入如下JS文件，（支持https）：<a href="http://res.wx.qq.com/open/js/jweixin-1.4.0.js" target="_blank" rel="noopener">http://res.wx.qq.com/open/js/jweixin-1.4.0.js</a></p><p>2.jssdk的签名权限,这个权限是由后台提供的,前端只需要把签名权限注入到wx.config中就可以了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">//初始化jssdk</span><br><span class="line">    var init = function(data)&#123;</span><br><span class="line">        //通过config接口注入权限验证配置</span><br><span class="line">        wx.config(&#123;</span><br><span class="line">            debug: false, // 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。</span><br><span class="line">            appId: data.app_id, // 必填，公众号的唯一标识</span><br><span class="line">            timestamp: data.timestamp, // 必填，生成签名的时间戳</span><br><span class="line">            nonceStr: data.nonceStr, // 必填，生成签名的随机串</span><br><span class="line">            signature: data.signature,// 必填，签名，见附录1</span><br><span class="line">            jsApiList: [&apos;onMenuShareTimeline&apos;,&apos;onMenuShareAppMessage&apos;] // 必填，需要使用的JS接口列表</span><br><span class="line">        &#125;);</span><br><span class="line">        //通过ready接口处理成功验证</span><br><span class="line">        wx.ready(function()&#123;</span><br><span class="line">            //分享到朋友圈</span><br><span class="line">            </span><br><span class="line">//  var local_url = $.getStorge(&apos;auth_url&apos;);</span><br><span class="line">//  if(!local_url)&#123;</span><br><span class="line">//  local_url = window.location.href;</span><br><span class="line">//  &#125;</span><br><span class="line">    var local_url = window.location.href;</span><br><span class="line">           </span><br><span class="line">            console.log(local_url);</span><br><span class="line">            wx.onMenuShareTimeline(&#123;</span><br><span class="line">    title: desc+&apos;--&apos;+title, // 分享标题</span><br><span class="line">    link: local_url, // 分享链接，该链接域名或路径必须与当前页面对应的公众号JS安全域名一致</span><br><span class="line">    imgUrl: &apos;http://jssdk.cloud-cy.com/wechatShopServer/&apos;+logo, // 分享图标</span><br><span class="line">    success: function () &#123; </span><br><span class="line">        // 用户确认分享后执行的回调函数</span><br><span class="line">    &#125;,</span><br><span class="line">    cancel: function () &#123; </span><br><span class="line">        // 用户取消分享后执行的回调函数</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">//分享给朋友</span><br><span class="line">wx.onMenuShareAppMessage(&#123;</span><br><span class="line">    title: title, // 分享标题</span><br><span class="line">    desc: desc, // 分享描述</span><br><span class="line">    link: local_url, // 分享链接，该链接域名或路径必须与当前页面对应的公众号JS安全域名一致</span><br><span class="line">    imgUrl: &apos;http://jssdk.cloud-cy.com/wechatShopServer/&apos;+logo, // 分享图标</span><br><span class="line">    type: &apos;link&apos;, // 分享类型,music、video或link，不填默认为link</span><br><span class="line">    dataUrl: &apos;&apos;, // 如果type是music或video，则要提供数据链接，默认为空</span><br><span class="line">    success: function () &#123; </span><br><span class="line">        // 用户确认分享后执行的回调函数</span><br><span class="line">    &#125;,</span><br><span class="line">    cancel: function () &#123; </span><br><span class="line">        // 用户取消分享后执行的回调函数</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">//获取jssdk配置</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">        type:&quot;get&quot;,</span><br><span class="line">        url:web+&quot;/Jssdk&quot;,</span><br><span class="line">        data:&#123;</span><br><span class="line">        url:window.location.href,</span><br><span class="line">        url_code:account</span><br><span class="line">        &#125;,</span><br><span class="line">        dataType:&quot;json&quot;,</span><br><span class="line">        success:function(data,textStatus)&#123;console.log(data);</span><br><span class="line">            if(data.code==200)&#123;</span><br><span class="line">                init(data.data);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">//              alert(&quot;连接失败，请稍后再试或联系管理员&quot;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/langhuonan/wechat/master/mdImages/day1/1.jpg&quot; alt=&quot;avatar&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;vue中使用（vux版）&quot;&gt;&lt;a href=&quot;#vue中使用（vux版）&quot; class=&quot;headerlink&quot; title=&quot;vue中使用（vux版）&quot;&gt;&lt;/a&gt;vue中使用（vux版）&lt;/h3&gt;&lt;h4 id=&quot;微信扫一扫功能&quot;&gt;&lt;a href=&quot;#微信扫一扫功能&quot; class=&quot;headerlink&quot; title=&quot;微信扫一扫功能&quot;&gt;&lt;/a&gt;微信扫一扫功能&lt;/h4&gt;&lt;p&gt;分享接口只有认证公众号才能使用，域名必须备案且在微信后台设置。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue的类库vux安装</title>
    <link href="http://yoursite.com/2019/03/01/day5/"/>
    <id>http://yoursite.com/2019/03/01/day5/</id>
    <published>2019-03-01T07:14:55.000Z</published>
    <updated>2019-03-01T08:07:47.982Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/langhuonan/wechat/master/mdImages/day1/1.jpg" alt="avatar"></p><p>##cli环境中安装vux类库</p><pre><code>1. npm install vux --savevux2必须配合vux-loader使用, 请在build/webpack.base.conf.js里参照如下代码进行配置：</code></pre><a id="more"></a><pre><code>const vuxLoader = require(&apos;vux-loader&apos;)const webpackConfig = originalConfig 将原来的 module.exports 代码赋值给变量 webpackConfig (将原文件的module.exports改为let webpackConfig) 2.在文件最后一行复制下面代码<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">module.exports = vuxLoader.merge(webpackConfig, &#123;</span><br><span class="line">  plugins: [&apos;vux-ui&apos;]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>3. 在入口文件全局引入<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &apos;vue&apos;</span><br><span class="line">import &#123; XButton &#125; from &apos;vux&apos;</span><br></pre></td></tr></table></figure>例：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&apos;x-button&apos;, XButton)</span><br></pre></td></tr></table></figure>使用<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;x-button&gt;&lt;/x-button&gt;</span><br></pre></td></tr></table></figure>vux样式改变，可以在APP.vue中用样式覆盖，在组件内用scoped无法覆盖</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/langhuonan/wechat/master/mdImages/day1/1.jpg&quot; alt=&quot;avatar&quot;&gt;&lt;/p&gt;
&lt;p&gt;##cli环境中安装vux类库&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. npm install vux --save
vux2必须配合vux-loader使用, 请在build/webpack.base.conf.js里参照如下代码进行配置：
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序基础</title>
    <link href="http://yoursite.com/2019/02/28/weChat/"/>
    <id>http://yoursite.com/2019/02/28/weChat/</id>
    <published>2019-02-28T07:16:13.000Z</published>
    <updated>2019-03-04T06:03:50.110Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/langhuonan/wechat/master/mdImages/day3/wechat.jpg" alt="avatar"></p><h2 id="微信小程序相关及一些小坑"><a href="#微信小程序相关及一些小坑" class="headerlink" title="微信小程序相关及一些小坑"></a>微信小程序相关及一些小坑</h2><h3 id="1-页面滑动"><a href="#1-页面滑动" class="headerlink" title="1.页面滑动"></a>1.页面滑动</h3><p>小程序内容超出父盒子，或者页面超出屏幕都不会出现滚动条滑动，如需要滑动，要使用scroll-view组件包裹着要滑动的区域<br><a href="https://developers.weixin.qq.com/miniprogram/dev/component/scroll-view.html" target="_blank" rel="noopener">scroll-view</a>相关配置属性<br><a id="more"></a></p><h4 id="scroll-view相关"><a href="#scroll-view相关" class="headerlink" title="scroll-view相关"></a>scroll-view相关</h4><ol><li>scroll-view生效需要设置高度，如果没有设置高度，滑动效果不生效</li><li>去除scroll-view默认滚动条<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">::-webkit-scrollbar&#123;</span><br><span class="line"></span><br><span class="line">width: 0;</span><br><span class="line"></span><br><span class="line">height: 0;</span><br><span class="line"></span><br><span class="line">color: transparent;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="2-闭包问题"><a href="#2-闭包问题" class="headerlink" title="2.闭包问题"></a>2.闭包问题</h3><p>请求后台api中的success函数实际是一个闭包 ， 无法直接通过this来设置setData;<br>解决方案：<br>1.将当前对象赋给一个新对象：let that = this<br>2.使用箭头函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">onLoad: function (options) &#123;</span><br><span class="line">  console.log(options.uselogid)</span><br><span class="line">  wx.request(&#123;</span><br><span class="line">    url: util.Api.getUserPrizeInfo,</span><br><span class="line">    method: &apos;get&apos;,</span><br><span class="line">    data: &#123;</span><br><span class="line">      openid: app.globalData.openid,</span><br><span class="line">      user_log_id: options.uselogid</span><br><span class="line">    &#125;,</span><br><span class="line">    success: (res) =&gt; &#123;</span><br><span class="line">      // console.log(res.data)</span><br><span class="line">      this.setData(&#123;</span><br><span class="line">        cardData: res.data.data,</span><br><span class="line">        qrCode: res.data.data.qrCodeUrl,</span><br><span class="line">        uselogid: options.uselogid,</span><br><span class="line">        status: res.data.data.status</span><br><span class="line">      &#125;)</span><br><span class="line">      console.log(this.data.status)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="3-背景图片问题"><a href="#3-背景图片问题" class="headerlink" title="3.背景图片问题"></a>3.背景图片问题</h3><p>  小程序中的背景图片写在wxss预览时无法显现<br>  解决方案：<br>  1.将图片转为base64格式，才能在wxss内设置<br>  2.写行内样式，图片用网络图片，本地图片无法预览</p><h3 id="4-路由"><a href="#4-路由" class="headerlink" title="4.路由"></a>4.路由</h3><p> 1.使用navigator标签导航，注意url地址不能带文件后缀<br> 2.在js文件内注册事件跳转<br> wx.navigateTo跳转保留当前页面，也就是说会有返回箭头<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wx.navigateTo(&#123;</span><br><span class="line">      url: &apos;/pages/cardDetial/cardDetial?uselogid=&apos; + e.currentTarget.dataset.uselogid,</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure></p><p>wx.redirectTo跳转 关闭当前页面，跳转到应用内的某个页面。但是不允许跳转到 tabbar 页面。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wx.redirectTo(&#123;</span><br><span class="line">      url: &apos;/pages/superGift/superGift&apos;,</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure></p><h3 id="5-页面间传值"><a href="#5-页面间传值" class="headerlink" title="5.页面间传值"></a>5.页面间传值</h3><p>传值:和web页面差不多，也是在url地址后面拼接参数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wx.navigateTo(&#123;</span><br><span class="line">        url: &apos;/pages/cardDetial/cardDetial?uselogid=&apos; + e.currentTarget.dataset.uselogid,</span><br><span class="line">      &#125;)</span><br></pre></td></tr></table></figure></p><p>接收：直接在生命周期onLoad里用参数接收<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">onLoad: function (options) &#123;</span><br><span class="line">  console.log(options.uselogid)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><h3 id="6-无法使用外部字体图标"><a href="#6-无法使用外部字体图标" class="headerlink" title="6.无法使用外部字体图标"></a>6.无法使用外部字体图标</h3><p>大部分情况下直接下载iconfont的压缩包，将其内的iconfont.css文件复制到一个新的wxss文件内，然后在app.wxss文件内全局引入@import “/lib/style/iconfont.wxss”;就可以在任意文件中使用了<br>如果出现无法使用的情况，试试下面方法：<br>1，下载font-awesome字体包</p><p>2，打开Transfonter网站，上传字体iconfont.ttf，选择base64编码</p><p>3，convert完毕后点击下载，下载得到的包中有stylesheet.css文件，打开并对照font-awesome.css中的内容进行合并base64部分，加入到微信小程序的xxx.wxss文件中进行使用</p><pre><code>&lt;text class=&quot;iconfont icon-xxxx&quot;&gt;&lt;/text&gt;</code></pre><h3 id="7-setData修改数组或对象"><a href="#7-setData修改数组或对象" class="headerlink" title="7.setData修改数组或对象"></a>7.setData修改数组或对象</h3><p>setData无法直接修改引用类型的数据，需要字符串拼接的方式保存到变量中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var closeShow = &quot;redPacket.myClosePackect&quot;</span><br><span class="line">self.setData(&#123;</span><br><span class="line">            </span><br><span class="line">             [closeShow]: false,</span><br><span class="line">             </span><br><span class="line">           &#125;)</span><br></pre></td></tr></table></figure></p><h3 id="8-textarea注意事项"><a href="#8-textarea注意事项" class="headerlink" title="8.textarea注意事项"></a>8.textarea注意事项</h3><p>1.bug: 微信版本 6.3.30，textarea 在列表渲染时，新增加的 textarea 在自动聚焦时的位置计算错误。<br>2.tip: textarea 的 blur 事件会晚于页面上的 tap 事件，如果需要在 button 的点击事件获取 textarea，可以使用 form 的 bindsubmit。<br>3.tip: 不建议在多行文本上对用户的输入进行修改，所以 textarea 的 bindinput 处理函数并不会将返回值反映到 textarea 上。<br>4.tip: textarea 组件是由客户端创建的原生组件，它的层级是最高的，不能通过 z-index 控制层级。<br>5.tip: 请勿在 scroll-view、swiper、picker-view、movable-view 中使用 textarea 组件。<br>6.tip: css 动画对 textarea 组件无效。</p><h3 id="9-原生组件无法被覆盖的问题"><a href="#9-原生组件无法被覆盖的问题" class="headerlink" title="9.原生组件无法被覆盖的问题"></a>9.原生组件无法被覆盖的问题</h3><p>map、video、canvas、camera 等原生组件上不可被标签覆盖，如果需要覆盖，要使用cover-view标签 且只支持嵌套cover-view、cover-image</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/langhuonan/wechat/master/mdImages/day3/wechat.jpg&quot; alt=&quot;avatar&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;微信小程序相关及一些小坑&quot;&gt;&lt;a href=&quot;#微信小程序相关及一些小坑&quot; class=&quot;headerlink&quot; title=&quot;微信小程序相关及一些小坑&quot;&gt;&lt;/a&gt;微信小程序相关及一些小坑&lt;/h2&gt;&lt;h3 id=&quot;1-页面滑动&quot;&gt;&lt;a href=&quot;#1-页面滑动&quot; class=&quot;headerlink&quot; title=&quot;1.页面滑动&quot;&gt;&lt;/a&gt;1.页面滑动&lt;/h3&gt;&lt;p&gt;小程序内容超出父盒子，或者页面超出屏幕都不会出现滚动条滑动，如需要滑动，要使用scroll-view组件包裹着要滑动的区域&lt;br&gt;&lt;a href=&quot;https://developers.weixin.qq.com/miniprogram/dev/component/scroll-view.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;scroll-view&lt;/a&gt;相关配置属性&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="weChat" scheme="http://yoursite.com/categories/weChat/"/>
    
    
  </entry>
  
  <entry>
    <title>将博客搬至CSDN</title>
    <link href="http://yoursite.com/2019/02/26/blogchange/"/>
    <id>http://yoursite.com/2019/02/26/blogchange/</id>
    <published>2019-02-26T06:10:08.000Z</published>
    <updated>2019-03-01T06:56:08.447Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/langhuonan/wechat/master/mdImages/public/02.jpg" alt="avatar"></p><h3 id="搬家通知地址"><a href="#搬家通知地址" class="headerlink" title="搬家通知地址"></a>搬家通知地址</h3><p>个人博客地址已搬家到CSDN，希望大家多多支持</p><a id="more"></a><p>最近利用hexo搭了一个博客主页，之前都是混掘金，但感觉掘金上的人越来越少了，是时候踏入下一个江湖啦~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/langhuonan/wechat/master/mdImages/public/02.jpg&quot; alt=&quot;avatar&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;搬家通知地址&quot;&gt;&lt;a href=&quot;#搬家通知地址&quot; class=&quot;headerlink&quot; title=&quot;搬家通知地址&quot;&gt;&lt;/a&gt;搬家通知地址&lt;/h3&gt;&lt;p&gt;个人博客地址已搬家到CSDN，希望大家多多支持&lt;/p&gt;
    
    </summary>
    
    
      <category term="搬家" scheme="http://yoursite.com/tags/%E6%90%AC%E5%AE%B6/"/>
    
  </entry>
  
  <entry>
    <title>vue-cli生成vue项目</title>
    <link href="http://yoursite.com/2019/01/17/first/"/>
    <id>http://yoursite.com/2019/01/17/first/</id>
    <published>2019-01-17T07:54:13.000Z</published>
    <updated>2019-03-01T06:57:40.400Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/langhuonan/wechat/master/mdImages/day1/1.jpg" alt="avatar"></p><h3 id="全局安装-vue-cli"><a href="#全局安装-vue-cli" class="headerlink" title="全局安装 vue-cli"></a>全局安装 vue-cli</h3><p>1.$ cnpm install –global vue-cli </p><p>如果已经安装过了就不用安装了，这里我前面的项目已经安装过了，所以直接从第二步开始<br><a id="more"></a></p><h3 id="my-project为自定义项目名"><a href="#my-project为自定义项目名" class="headerlink" title="my-project为自定义项目名"></a>my-project为自定义项目名</h3><p>2.$ vue init webpack my-project</p><p>需要注意的是项目的名称不能大写，不然会报错<br><img src="https://raw.githubusercontent.com/langhuonan/wechat/master/mdImages/day1/2.png" alt="avatar"></p><h3 id="项目初始化时会询问一些安装项，可以根据自己的需求选择"><a href="#项目初始化时会询问一些安装项，可以根据自己的需求选择" class="headerlink" title="项目初始化时会询问一些安装项，可以根据自己的需求选择"></a>项目初始化时会询问一些安装项，可以根据自己的需求选择</h3><p><img src="https://raw.githubusercontent.com/langhuonan/wechat/master/mdImages/day1/1.png" alt="avatar"></p><p>Project name (my-project) ==&gt;项目名称（我的项目）</p><p>Project description (A Vue.js project) ==&gt;项目描述一个Vue.js 项目</p><p> Author 作者（你的名字）</p><p>nstall vue-router? (Y/n) ==&gt;是否安装Vue路由，也就是以后是spa（但页面应用需要的模块）yes</p><p>Use ESLint to lint your code? (Y/n) ==&gt;使用 ESLint 到你的代码？ （Y [ yes ] / N [ no ]）此处建议选no，如果不是按照ESLint风格，编译时就会报错（就是这里坑了我，找半天没发现逻辑问题）</p><p>Pick an ESLint preset (Use arrow keys) ==&gt;选择一个预置ESLint（使用箭头键） </p><p>Setup unit tests with Karma + Mocha? (Y/n) ==&gt;设置单元测Karma + Mocha？ （Y/ N）</p><p>Setup e2e tests with Nightwatch? (Y/n) ==&gt;设置端到端测试，Nightwatch？这里需要选yes，否则会报websocket的错误 （Y/ N）Y</p><p>3.最后一步就是安心等待啦<br><img src="https://raw.githubusercontent.com/langhuonan/wechat/master/mdImages/day1/0.png" alt="avatar"></p><p>完成后运行npm run Dev项目就运行起来啦</p><p><img src="https://raw.githubusercontent.com/langhuonan/wechat/master/mdImages/day1/0.jpg" alt="avatar"></p><p><strong>注：</strong></p><p>Vue取消eslint语法限制</p><p>在build/webpack.base.conf.js文件中，注释或者删除掉：module-&gt;rules中有关eslint的规则</p><p><img src="https://raw.githubusercontent.com/langhuonan/wechat/master/mdImages/day1/4.png" alt="avatar"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/langhuonan/wechat/master/mdImages/day1/1.jpg&quot; alt=&quot;avatar&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;全局安装-vue-cli&quot;&gt;&lt;a href=&quot;#全局安装-vue-cli&quot; class=&quot;headerlink&quot; title=&quot;全局安装 vue-cli&quot;&gt;&lt;/a&gt;全局安装 vue-cli&lt;/h3&gt;&lt;p&gt;1.$ cnpm install –global vue-cli &lt;/p&gt;
&lt;p&gt;如果已经安装过了就不用安装了，这里我前面的项目已经安装过了，所以直接从第二步开始&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
    
  </entry>
  
  <entry>
    <title>Git的基本使用</title>
    <link href="http://yoursite.com/2019/01/17/hello-world/"/>
    <id>http://yoursite.com/2019/01/17/hello-world/</id>
    <published>2019-01-17T07:40:55.338Z</published>
    <updated>2019-02-28T08:47:59.980Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/langhuonan/wechat/master/mdImages/day2/0.jpg" alt="avatar"></p><p>“ 很早之前便注册了github，一直没有使用，正好这次搭建blogs可以熟悉下好久没用的git，当然，我对git的理解还是很粗浅的，主要还是通过Git教程 - 廖雪峰的官方网站来学习。”</p><p>git的安装就不做介绍了，都是一直下一步的操作，我们直接进入git的操作。</p><a id="more"></a><h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><p>先创建一个本地的版本库（就是一个文件夹，随便在哪建一个）</p><p><img src="https://raw.githubusercontent.com/langhuonan/wechat/master/mdImages/day2/0.png" alt="avatar"></p><h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><p>   通过git init 将这个文件夹变成git可管理的厂库 进入文件夹内右击打开git bash命令行窗口</p><p><img src="https://raw.githubusercontent.com/langhuonan/wechat/master/mdImages/day2/01.png" alt="avatar"></p><h3 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h3><p>此时你会发现文件夹内多了一个.git的文件，这是用来跟踪和管理版本库的。它是默认隐藏的，如果你看不到，那就需要设置一下让隐藏文件可见<br><img src="https://raw.githubusercontent.com/langhuonan/wechat/master/mdImages/day2/02.png" alt="avatar"></p><p>到了这一步，你就可以将自己的项目文件复制进来了然后通过git status 查看当前状态<br><img src="https://raw.githubusercontent.com/langhuonan/wechat/master/mdImages/day2/03.jpg" alt="avatar"></p><h3 id="第四步、"><a href="#第四步、" class="headerlink" title="第四步、"></a>第四步、</h3><pre><code>看到文件状态后，再通过git add . 将改文件下的所有目录添加到厂库，然后用git commit -m &quot;注释&quot;把项目提交到仓库。-m后面的引号内是你本次提交的注释，这个可以随便写，或者空着</code></pre><h3 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a>第五步</h3><pre><code>将Git仓库与本地仓库进行关联（这个操作只用执行一次，关联后下次可直接进行提交）</code></pre><p>git remote add origin <a href="https://github.com/langhuonan/langhuonan.github.io.git" target="_blank" rel="noopener">https://github.com/langhuonan/langhuonan.github.io.git</a> </p><p>git remote add origin 后面跟的是你github的仓库地址</p><h3 id="第六步"><a href="#第六步" class="headerlink" title="第六步"></a>第六步</h3><p>关联好后我们就可以吧本地库的内容推送到远程仓库github上啦</p><pre><code>git push -u origin master (第一次推送由于远程库是空的，所以要加上-u这个参数，下次再传的时候只需要git push origin master)至此就完成了将本地项目上传到远程库的整个过程</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/langhuonan/wechat/master/mdImages/day2/0.jpg&quot; alt=&quot;avatar&quot;&gt;&lt;/p&gt;
&lt;p&gt;“ 很早之前便注册了github，一直没有使用，正好这次搭建blogs可以熟悉下好久没用的git，当然，我对git的理解还是很粗浅的，主要还是通过Git教程 - 廖雪峰的官方网站来学习。”&lt;/p&gt;
&lt;p&gt;git的安装就不做介绍了，都是一直下一步的操作，我们直接进入git的操作。&lt;/p&gt;
    
    </summary>
    
      <category term="web前端" scheme="http://yoursite.com/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
  </entry>
  
</feed>
