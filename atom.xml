<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>紫气楠楠</title>
  <icon>https://www.gravatar.com/avatar/7124a429c575994ec398d35a1de49b3d</icon>
  <subtitle>记录点滴，分享世界</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-06-19T03:26:31.537Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Lval</name>
    <email>m1921219654@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vue项目中使用md5加密</title>
    <link href="http://yoursite.com/2019/06/19/19-06/19-6-19/"/>
    <id>http://yoursite.com/2019/06/19/19-06/19-6-19/</id>
    <published>2019-06-19T02:01:03.000Z</published>
    <updated>2019-06-19T03:26:31.537Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><code>npm install --save js-md5</code></p><h3 id="组件内引入"><a href="#组件内引入" class="headerlink" title="组件内引入"></a>组件内引入</h3><p>需要的组件内引用<br><code>import md5 from &#39;js-md5&#39;;</code><br>使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let psd = &apos;123123&apos;</span><br><span class="line">md5(psd)  // 4297f44b13955235245b2497399d7a93</span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="全局引入"><a href="#全局引入" class="headerlink" title="全局引入"></a>全局引入</h3><p>在main.js中将md5注入到vue原型上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import md5 from &apos;js-md5&apos;;</span><br><span class="line"></span><br><span class="line">Vue.prototype.$md5 = md5;</span><br></pre></td></tr></table></figure><p>使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let psd = &apos;123123&apos;</span><br><span class="line">this.$md5(psd) // 4297f44b13955235245b2497399d7a93</span><br></pre></td></tr></table></figure></p><p>例：密码：用户密码md5加密后的字符串+openid 再次经过MD5加密后的字符串<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">data()&#123;</span><br><span class="line">    return:&#123;</span><br><span class="line">        psd:&apos;123123&apos;,</span><br><span class="line">        openid:&apos;123456&apos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods:&#123;</span><br><span class="line">    addpsd:&#123;</span><br><span class="line">        let psd = this.$md5(this.psd)+this.openid //先将用户密码进行md5加密，再拼接上openid得到一个字符串</span><br><span class="line">        let mdpsd = this.$md5(psd) //将上面的字符串再进行一次md5加密</span><br><span class="line">        console.log(mdpsd)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h3&gt;&lt;p&gt;&lt;code&gt;npm install --save js-md5&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;组件内引入&quot;&gt;&lt;a href=&quot;#组件内引入&quot; class=&quot;headerlink&quot; title=&quot;组件内引入&quot;&gt;&lt;/a&gt;组件内引入&lt;/h3&gt;&lt;p&gt;需要的组件内引用&lt;br&gt;&lt;code&gt;import md5 from &amp;#39;js-md5&amp;#39;;&lt;/code&gt;&lt;br&gt;使用&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;let psd = &amp;apos;123123&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;md5(psd)  // 4297f44b13955235245b2497399d7a93&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>小程序canvas绘制图片并保存</title>
    <link href="http://yoursite.com/2019/06/18/19-06/19-6-18/"/>
    <id>http://yoursite.com/2019/06/18/19-06/19-6-18/</id>
    <published>2019-06-18T02:01:03.000Z</published>
    <updated>2019-06-19T03:07:47.705Z</updated>
    
    <content type="html"><![CDATA[<h3 id="准备画布"><a href="#准备画布" class="headerlink" title="准备画布"></a>准备画布</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;canvas style=&quot;width: 300px; height: 369px;&quot; canvas-id=&apos;myCanvas&apos;&gt;&lt;/canvas&gt;</span><br></pre></td></tr></table></figure><h3 id="建立canvas绘图的上下文对象"><a href="#建立canvas绘图的上下文对象" class="headerlink" title="建立canvas绘图的上下文对象"></a>建立canvas绘图的上下文对象</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const ctx = wx.createCanvasContext(&apos;myCanvas&apos;)</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="绘制"><a href="#绘制" class="headerlink" title="绘制"></a>绘制</h3><p>先绘制一个和画布等同大小的白色矩形作为底图<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ctx.setFillStyle(&apos;#fff&apos;) //设置填充色</span><br><span class="line">ctx.fillRect(0, 0, this.shiftSize(300), this.shiftSize(369))</span><br><span class="line">ctx.draw()</span><br><span class="line">ctx.save()//保存当前的绘图上下文。</span><br><span class="line">ctx.beginPath()//开始创建一个路径</span><br></pre></td></tr></table></figure></p><p>绘制文字<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ctx.setFillStyle(&apos;#EB4E3F&apos;)</span><br><span class="line">ctx.setFontSize(this.shiftSize(12))</span><br><span class="line">ctx.fillText(&apos;啦啦啦&apos;, this.shiftSize(15), this.shiftSize(325))</span><br><span class="line">ctx.draw(true)//参数为 true，则保留当前画布上的内容,否则画布前面的内容会被清空</span><br></pre></td></tr></table></figure></p><p>绘制图片并裁剪为圆形<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ctx.arc(this.shiftSize(40), this.shiftSize(35), this.shiftSize(25), 0, 2 * Math.PI)//画一个圆形裁剪区域</span><br><span class="line">ctx.setStrokeStyle(&apos;#999&apos;)</span><br><span class="line">ctx.stroke()</span><br><span class="line">ctx.clip()//裁剪</span><br><span class="line">ctx.drawImage(this.data.goodsInfo.img_url, this.shiftSize(15), this.shiftSize(10), this.shiftSize(50), this.shiftSize(50))//绘制图片</span><br><span class="line">ctx.restore()//恢复之前保存的绘图上下文</span><br><span class="line">ctx.draw(true)//绘制到canvas</span><br></pre></td></tr></table></figure></p><p>注：canvas画布的默认单位是px，所以我们需要换算一下单位<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">shiftSize: function (w) &#123;</span><br><span class="line">    if (this.data.windowV) &#123;</span><br><span class="line">      return w / this.data.windowV;</span><br><span class="line">    &#125;</span><br><span class="line">    return w;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></p><h3 id="保存绘制的图片到相册"><a href="#保存绘制的图片到相册" class="headerlink" title="保存绘制的图片到相册"></a>保存绘制的图片到相册</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">saveCanvasImg()&#123;</span><br><span class="line">    wx.canvasToTempFilePath(&#123;//把当前画布指定区域的内容导出生成指定大小的图片</span><br><span class="line">      canvasId: &apos;myCanvas&apos;,</span><br><span class="line">      success(res) &#123;</span><br><span class="line">        wx.authorize(&#123;//向用户发起授权请求</span><br><span class="line">          scope: &apos;scope.writePhotosAlbum&apos;,//保存相册授权</span><br><span class="line">          success:()=&gt;&#123;</span><br><span class="line">            wx.saveImageToPhotosAlbum(&#123;//保存图片到系统相册</span><br><span class="line">              filePath: res.tempFilePath,</span><br><span class="line">              success:()=&gt;&#123;</span><br><span class="line">                wx.showToast(&#123;</span><br><span class="line">                  title: &apos;图片保存成功&apos;</span><br><span class="line">                &#125;)</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;准备画布&quot;&gt;&lt;a href=&quot;#准备画布&quot; class=&quot;headerlink&quot; title=&quot;准备画布&quot;&gt;&lt;/a&gt;准备画布&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;canvas style=&amp;quot;width: 300px; height: 369px;&amp;quot; canvas-id=&amp;apos;myCanvas&amp;apos;&amp;gt;&amp;lt;/canvas&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;建立canvas绘图的上下文对象&quot;&gt;&lt;a href=&quot;#建立canvas绘图的上下文对象&quot; class=&quot;headerlink&quot; title=&quot;建立canvas绘图的上下文对象&quot;&gt;&lt;/a&gt;建立canvas绘图的上下文对象&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;const ctx = wx.createCanvasContext(&amp;apos;myCanvas&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="canvas js" scheme="http://yoursite.com/categories/canvas-js/"/>
    
    
      <category term="canvas" scheme="http://yoursite.com/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>canvas字体换行</title>
    <link href="http://yoursite.com/2019/06/17/19-06/19-6-17/"/>
    <id>http://yoursite.com/2019/06/17/19-06/19-6-17/</id>
    <published>2019-06-17T02:01:03.000Z</published>
    <updated>2019-06-17T02:14:23.619Z</updated>
    
    <content type="html"><![CDATA[<h3 id="canvas绘制的字体换行"><a href="#canvas绘制的字体换行" class="headerlink" title="canvas绘制的字体换行"></a>canvas绘制的字体换行</h3><p>问题描述：canvas绘制的字体是不会自动换行的，也没有相关的api，所以我们想要canvas文字自动换行，只能利用js从字体长度或字数入手</p><p>相关api：canvas measureText()在画布上输出文本之前，检查字体的宽度<br>利用这个方法我们可以在文字超出指定长度后做换行处理</p><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;mask_operation&quot; v-show=&quot;cvsshow&quot; @click=&quot;createdImg&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;cvs-box&quot;&gt;</span><br><span class="line">        &lt;canvas id=&quot;mycvs&quot; ref=&quot;cvs&quot; width=&quot;300&quot; height=&quot;369&quot;&gt;&lt;/canvas&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="js"><a href="#js" class="headerlink" title="js"></a>js</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">createdImg()&#123;</span><br><span class="line">    //$refs.cvs获取vue的dom节点（原生的直接document获取dom节点）</span><br><span class="line">    let cvs = this.$refs.cvs</span><br><span class="line">    let ctx=cvs.getContext(&quot;2d&quot;);</span><br><span class="line">    this.drawtext(ctx,&apos;在画布上输出文本之前，检查字体的宽度&apos;,15,245,168)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 文字换行</span><br><span class="line">drawtext(ctx,t,x,y,w)&#123;</span><br><span class="line">    //参数说明</span><br><span class="line">    //ctx：canvas的 2d 对象，t：绘制的文字，x,y:文字坐标，w：文字最大宽度</span><br><span class="line">    let chr = t.split(&quot;&quot;)</span><br><span class="line">    let temp = &quot;&quot;</span><br><span class="line">    let row = []</span><br><span class="line"></span><br><span class="line">    for (let a = 0; a&lt;chr.length;a++)&#123;</span><br><span class="line">        if( ctx.measureText(temp).width &lt; w &amp;&amp; ctx.measureText(temp+(chr[a])).width &lt;= w)&#123;</span><br><span class="line">            temp += chr[a];</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            row.push(temp);</span><br><span class="line">            temp = chr[a];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    row.push(temp)</span><br><span class="line">    for(let b=0;b&lt;row.length;b++)&#123;</span><br><span class="line">        ctx.fillText(row[b],x,y+(b+1)*20);//每行字体y坐标间隔20</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;canvas绘制的字体换行&quot;&gt;&lt;a href=&quot;#canvas绘制的字体换行&quot; class=&quot;headerlink&quot; title=&quot;canvas绘制的字体换行&quot;&gt;&lt;/a&gt;canvas绘制的字体换行&lt;/h3&gt;&lt;p&gt;问题描述：canvas绘制的字体是不会自动换行的，也没有相关的api，所以我们想要canvas文字自动换行，只能利用js从字体长度或字数入手&lt;/p&gt;
&lt;p&gt;相关api：canvas measureText()在画布上输出文本之前，检查字体的宽度&lt;br&gt;利用这个方法我们可以在文字超出指定长度后做换行处理&lt;/p&gt;
&lt;h3 id=&quot;HTML&quot;&gt;&lt;a href=&quot;#HTML&quot; class=&quot;headerlink&quot; title=&quot;HTML&quot;&gt;&lt;/a&gt;HTML&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;div class=&amp;quot;mask_operation&amp;quot; v-show=&amp;quot;cvsshow&amp;quot; @click=&amp;quot;createdImg&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;div class=&amp;quot;cvs-box&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;canvas id=&amp;quot;mycvs&amp;quot; ref=&amp;quot;cvs&amp;quot; width=&amp;quot;300&amp;quot; height=&amp;quot;369&amp;quot;&amp;gt;&amp;lt;/canvas&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="canvas" scheme="http://yoursite.com/categories/canvas/"/>
    
    
      <category term="canvas" scheme="http://yoursite.com/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>小程序左滑显示删除功能</title>
    <link href="http://yoursite.com/2019/05/30/19-05/19-5-30/"/>
    <id>http://yoursite.com/2019/05/30/19-05/19-5-30/</id>
    <published>2019-05-30T07:29:13.000Z</published>
    <updated>2019-05-31T07:17:27.196Z</updated>
    
    <content type="html"><![CDATA[<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li><p>采用分层思想，每个item分为上下两层，上面一层放内容，下面一层放删除按钮</p></li><li><p>上面一层采用绝对定位，下面一层放到需要显示的位置，通过动态设置right属性的值，来实现向左滑动漏出下面的删除按钮</p></li><li><p>通过touchstart，touchmove 这几个事件来判断滑动的方向</p></li><li><p>通过item的index值确定滑动的是哪一项，设置滑动项的right值</p></li></ol><a id="more"></a><h3 id="在需要滑动的item上注册事件"><a href="#在需要滑动的item上注册事件" class="headerlink" title="在需要滑动的item上注册事件"></a>在需要滑动的item上注册事件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;view class=&apos;address-list&apos; data-index=&quot;&#123;&#123;index&#125;&#125;&quot; bindtouchstart=&apos;touchStart&apos; bindtouchmove=&apos;touchMove&apos;&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- 删除按钮 --&gt;</span><br><span class="line">    &lt;view class=&apos;del&apos;&gt;&lt;image src=&apos;&#123;&#123;AppImg.address_del&#125;&#125;&apos;&gt;&lt;/image&gt;&lt;/view&gt;</span><br><span class="line">    &lt;!-- 内容 --&gt;</span><br><span class="line">    &lt;view class=&apos;adsInfo&apos; style=&quot;right:&#123;&#123;item.right&#125;&#125;&quot;&gt;</span><br><span class="line">      &lt;view class=&apos;icontrue&apos;&gt;&lt;image src=&apos;&#123;&#123;AppImg.address_right&#125;&#125;&apos;&gt;&lt;/image&gt;&lt;/view&gt;</span><br><span class="line">      &lt;view class=&apos;info&apos;&gt;</span><br><span class="line">        &lt;view class=&apos;info-name&apos;&gt;涂山苏苏&lt;/view&gt;</span><br><span class="line">        &lt;view class=&apos;info-address&apos;&gt;海市上海市浦东新海市上海市浦东新海市上海市浦东新&lt;/view&gt;</span><br><span class="line">      &lt;/view&gt;</span><br><span class="line">      &lt;view class=&apos;iconmsg&apos;&gt;&lt;image src=&apos;&#123;&#123;AppImg.address_change&#125;&#125;&apos;&gt;&lt;/image&gt;&lt;/view&gt;</span><br><span class="line">    &lt;/view&gt;</span><br><span class="line"></span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure><h3 id="js"><a href="#js" class="headerlink" title="js"></a>js</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">data:&#123;</span><br><span class="line">    movedel:&#123;</span><br><span class="line">      clientStart:&apos;&apos;,//滑动开始的位置</span><br><span class="line">      clientMove:&apos;&apos;,//滑动的位置</span><br><span class="line">    &#125;,</span><br><span class="line">    addressList:[</span><br><span class="line">      &#123;id:1,right:&apos;&apos;&#125;,</span><br><span class="line">      &#123; id: 2, right: &apos;&apos; &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 开始滑动</span><br><span class="line">  touchStart(e)&#123;</span><br><span class="line">    let start = &quot;movedel.clientStart&quot;</span><br><span class="line">    this.setData(&#123;</span><br><span class="line">      [start]: e.touches[0].clientX</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  // 滑动</span><br><span class="line">  touchStart(e)&#123;</span><br><span class="line">    let start = &quot;movedel.clientStart&quot;</span><br><span class="line">    this.setData(&#123;</span><br><span class="line">      [start]: e.touches[0].clientX</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  // 滑动</span><br><span class="line">  touchMove(e)&#123;</span><br><span class="line">    let move = &apos;movedel.clientMove&apos;</span><br><span class="line">    this.setData(&#123;</span><br><span class="line">      [move]: e.touches[0].clientX</span><br><span class="line">    &#125;)</span><br><span class="line">    let distance = this.data.movedel.clientStart - this.data.movedel.clientMove</span><br><span class="line">    //确定滑动的是哪一项</span><br><span class="line">    let index = e.currentTarget.dataset.index</span><br><span class="line">    </span><br><span class="line">    let list = this.data.addressList</span><br><span class="line"></span><br><span class="line">    if(distance&lt;=0)&#123;</span><br><span class="line">      list[index].right = &apos;0&apos;;</span><br><span class="line">      this.setData(&#123;</span><br><span class="line">        addressList:list</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    if(distance&gt;=80)&#123;</span><br><span class="line">      list[index].right = &apos;80rpx&apos;;</span><br><span class="line">      this.setData(&#123;</span><br><span class="line">        addressList: list</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;采用分层思想，每个item分为上下两层，上面一层放内容，下面一层放删除按钮&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;上面一层采用绝对定位，下面一层放到需要显示的位置，通过动态设置right属性的值，来实现向左滑动漏出下面的删除按钮&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;通过touchstart，touchmove 这几个事件来判断滑动的方向&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;通过item的index值确定滑动的是哪一项，设置滑动项的right值&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="小程序" scheme="http://yoursite.com/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>小程序商品秒杀</title>
    <link href="http://yoursite.com/2019/05/18/19-05/19-5-31/"/>
    <id>http://yoursite.com/2019/05/18/19-05/19-5-31/</id>
    <published>2019-05-18T07:20:03.000Z</published>
    <updated>2019-05-31T08:28:54.011Z</updated>
    
    <content type="html"><![CDATA[<p>思路：</p><ol><li>获取当前时间，同时得到活动结束时间数组；</li><li>循环活动结束时间数组，计算每个商品活动结束时间的倒计时天、时、分、秒；</li><li>用 setData 方法刷新数据；</li><li>每个一秒执行一次倒计时函数 setInterval(this.countTime,1000)</li></ol><a id="more"></a><h3 id="wxml"><a href="#wxml" class="headerlink" title="wxml"></a>wxml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;view class=&apos;goods-box&apos; wx:for=&quot;&#123;&#123;goodsData&#125;&#125;&quot; wx:key=&quot;index&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;view class=&apos;time-txt&apos;&gt;距离开始还剩：&#123;&#123;item.now&#125;&#125;&lt;/view&gt;</span><br><span class="line"></span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure><p>js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">  data&#123;</span><br><span class="line">      goodsData:[</span><br><span class="line">      &#123; id: 1, status: 0, endtime: &apos;2019-05-29 15:06:00&apos;, now:&apos;&apos; &#125;,</span><br><span class="line">      &#123; id: 2, status: 1, endtime: &apos;2019-05-31 15:06:00&apos;, now:&apos;&apos; &#125;,</span><br><span class="line">      &#123; id: 3, status: 2, endtime: &apos;2019-06-01 15:06:00&apos;, now:&apos;&apos; &#125;,</span><br><span class="line">      &#123; id: 4, status: 3, endtime: &apos;2019-05-31 19:06:00&apos;, now:&apos;&apos; &#125;</span><br><span class="line">      ],</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">onLoad: function (options) &#123;</span><br><span class="line">  this.countTime()</span><br><span class="line">  setInterval(this.countTime,1000)</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">// 倒计时</span><br><span class="line">countTime()&#123;</span><br><span class="line">  let now = new Date().getTime()</span><br><span class="line">  let endList = this.data.goodsData</span><br><span class="line"></span><br><span class="line">  endList.forEach(v=&gt;&#123;</span><br><span class="line">    let end = new Date(v.endtime).getTime()</span><br><span class="line">    //时间差</span><br><span class="line">    let diftime = end - now </span><br><span class="line">    let h, m, s;</span><br><span class="line">    if (diftime &gt; 0)&#123;</span><br><span class="line">      h = Math.floor(diftime / 1000 / 60 / 60 % 24);</span><br><span class="line">      m = Math.floor(diftime / 1000 / 60 % 60);</span><br><span class="line">      s = Math.floor(diftime / 1000 % 60);</span><br><span class="line"></span><br><span class="line">      s = s &lt; 10 ? &quot;0&quot; + s : s</span><br><span class="line">      m = m &lt; 10 ? &quot;0&quot; + m : m</span><br><span class="line">      h = h &lt; 10 ? &quot;0&quot; + h : h</span><br><span class="line">      v.now = h + &quot;时&quot; + m + &quot;分&quot; + s + &quot;秒&quot;</span><br><span class="line">      //递归每秒调用countTime方法，显示动态时间效果</span><br><span class="line">      // setTimeout(this.countTime, 1000)</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">      //已结束</span><br><span class="line">      v.now = &apos;00时00分00秒&apos;</span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;)</span><br><span class="line">  this.setData(&#123;</span><br><span class="line">    goodsData: endList</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;思路：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;获取当前时间，同时得到活动结束时间数组；&lt;/li&gt;
&lt;li&gt;循环活动结束时间数组，计算每个商品活动结束时间的倒计时天、时、分、秒；&lt;/li&gt;
&lt;li&gt;用 setData 方法刷新数据；&lt;/li&gt;
&lt;li&gt;每个一秒执行一次倒计时函数 setInterval(this.countTime,1000)&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="秒杀" scheme="http://yoursite.com/categories/%E7%A7%92%E6%9D%80/"/>
    
    
      <category term="秒杀" scheme="http://yoursite.com/tags/%E7%A7%92%E6%9D%80/"/>
    
  </entry>
  
  <entry>
    <title>vue的axios拦截器使用</title>
    <link href="http://yoursite.com/2019/05/10/19-05/19-5-10/"/>
    <id>http://yoursite.com/2019/05/10/19-05/19-5-10/</id>
    <published>2019-05-10T03:20:03.000Z</published>
    <updated>2019-05-24T01:50:34.628Z</updated>
    
    <content type="html"><![CDATA[<h3 id="axios拦截器"><a href="#axios拦截器" class="headerlink" title="axios拦截器"></a>axios拦截器</h3><p>下载并使用axios后可以对全局进行拦截器设置。拦截器在发送请求前或响应返回时做一些特殊的处理。 </p><p>下面是一个为axios添加请求loading的例子：</p><h3 id="添加请求拦截器"><a href="#添加请求拦截器" class="headerlink" title="添加请求拦截器"></a>添加请求拦截器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//定义一个请求拦截器</span><br><span class="line">axios.interceptors.request.use(function(config)&#123;</span><br><span class="line">  Vue.$vux.loading.show(); //在请求发出之前进行一些操作</span><br><span class="line">  return config</span><br><span class="line">&#125;,function (error) &#123;</span><br><span class="line">  　　// 对请求错误做些什么</span><br><span class="line">  // return Promise.reject(error)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="添加响应拦截器"><a href="#添加响应拦截器" class="headerlink" title="添加响应拦截器"></a>添加响应拦截器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//定义一个响应拦截器</span><br><span class="line">axios.interceptors.response.use(function(config)&#123;</span><br><span class="line">  Vue.$vux.loading.hide();;//在这里对返回的数据进行处理</span><br><span class="line">  return config</span><br><span class="line">&#125;,function (error) &#123;</span><br><span class="line">  　　// 对请求错误做些什么</span><br><span class="line">  // return Promise.reject(error)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="移除拦截器"><a href="#移除拦截器" class="headerlink" title="移除拦截器"></a>移除拦截器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var myInterceptor = axios.interceptors.request.use(function () &#123;/*...*/&#125;);</span><br><span class="line">axios.interceptors.request.eject(myInterceptor);</span><br></pre></td></tr></table></figure><h3 id="为axios实例添加拦截器"><a href="#为axios实例添加拦截器" class="headerlink" title="为axios实例添加拦截器"></a>为axios实例添加拦截器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var instance = axios.create();</span><br><span class="line">instance.interceptors.request.use(function () &#123;/*...*/&#125;);</span><br></pre></td></tr></table></figure><h3 id="某一个函数不希望受到全局拦截器的影响"><a href="#某一个函数不希望受到全局拦截器的影响" class="headerlink" title="某一个函数不希望受到全局拦截器的影响"></a>某一个函数不希望受到全局拦截器的影响</h3><p>解决方法：在函数内从新添加一个拦截器<br>如下：为请求函数添加一个新的拦截器使之不受全局拦截器影响<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const $ajax = this.$http.create()</span><br></pre></td></tr></table></figure></p><p>例：下面函数不受全局拦截器影响<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">pollopenid()&#123;</span><br><span class="line">      const $ajax = this.$http.create()</span><br><span class="line">      $ajax(&#123;</span><br><span class="line">        method:&apos;post&apos;,</span><br><span class="line">        url:&apos;&apos;,</span><br><span class="line">        data:&#123;</span><br><span class="line">          </span><br><span class="line">        &#125;</span><br><span class="line">      &#125;).then(res=&gt;&#123;</span><br><span class="line">        </span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;axios拦截器&quot;&gt;&lt;a href=&quot;#axios拦截器&quot; class=&quot;headerlink&quot; title=&quot;axios拦截器&quot;&gt;&lt;/a&gt;axios拦截器&lt;/h3&gt;&lt;p&gt;下载并使用axios后可以对全局进行拦截器设置。拦截器在发送请求前或响应返回时做一些特殊的处理。 &lt;/p&gt;
&lt;p&gt;下面是一个为axios添加请求loading的例子：&lt;/p&gt;
&lt;h3 id=&quot;添加请求拦截器&quot;&gt;&lt;a href=&quot;#添加请求拦截器&quot; class=&quot;headerlink&quot; title=&quot;添加请求拦截器&quot;&gt;&lt;/a&gt;添加请求拦截器&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//定义一个请求拦截器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;axios.interceptors.request.use(function(config)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Vue.$vux.loading.show(); //在请求发出之前进行一些操作&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  return config&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;,function (error) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  　　// 对请求错误做些什么&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  // return Promise.reject(error)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue的计算属性和侦听器</title>
    <link href="http://yoursite.com/2019/05/07/19-05/19-5-7/"/>
    <id>http://yoursite.com/2019/05/07/19-05/19-5-7/</id>
    <published>2019-05-07T06:43:03.000Z</published>
    <updated>2019-05-07T07:20:30.923Z</updated>
    
    <content type="html"><![CDATA[<h3 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h3><h5 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h5><p>1、computed用来监控自己定义的变量，该变量不在data里面声明，直接在computed里面定义，然后就可以在页面上获取到并进行相应的数据处理</p><p>2、computed里可以完成各种复杂的逻辑，包括运算、函数调用等，只要最终返回一个结果就可以。</p><a id="more"></a><p>案例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div @click=&apos;add&apos;&gt; + &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">data()&#123;</span><br><span class="line">    return&#123;</span><br><span class="line">        num1: 11,</span><br><span class="line">        num2: 33</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed:&#123;</span><br><span class="line">      total:function()&#123;</span><br><span class="line">      return this.num1 + this.num2 //总分会随着num1，num2的变化而重新计算</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">      add()&#123;</span><br><span class="line">          this.num1++</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>上面案例中total返回的是num1和num2的总和，且每次点击加号时total的值都会随着num1的变化而变化，由此可知计算属性可以依赖多个Vue 实例的数据，只要其中任一数据变化，计算属性就会重新执行，视图也会更新。</p><h5 id="计算属性的setter"><a href="#计算属性的setter" class="headerlink" title="计算属性的setter"></a>计算属性的setter</h5><p>计算属性默认只有 getter ，不过在需要时你也可以提供一个 setter ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  fullName: &#123;</span><br><span class="line">    // getter</span><br><span class="line">    get: function () &#123;</span><br><span class="line">      return this.firstName + &apos; &apos; + this.lastName</span><br><span class="line">    &#125;,</span><br><span class="line">    // setter</span><br><span class="line">    set: function (newValue) &#123;</span><br><span class="line">      var names = newValue.split(&apos; &apos;)</span><br><span class="line">      this.firstName = names[0]</span><br><span class="line">      this.lastName = names[names.length - 1]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在再运行 vm.fullName = ‘John Doe’ 时，setter 会被调用，vm.firstName 和 vm.lastName 也会相应地被更新。</p><h3 id="侦听器-watch"><a href="#侦听器-watch" class="headerlink" title="侦听器 watch"></a>侦听器 watch</h3><p>虽然计算属性在大多数情况下更合适，但有时也需要一个自定义的侦听器。这就是为什么 Vue 通过 watch 选项提供了一个更通用的方法，来响应数据的变化。<br>当需要在数据变化时执行异步或开销较大的操作时，这个方式是最有用的</p><p>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;watch-example&quot;&gt;</span><br><span class="line">  &lt;p&gt;</span><br><span class="line">    Ask a yes/no question:</span><br><span class="line">    &lt;input v-model=&quot;question&quot;&gt;</span><br><span class="line">  &lt;/p&gt;</span><br><span class="line">  &lt;p&gt;&#123;&#123; answer &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">watch: &#123;</span><br><span class="line">    // 如果 `question` 发生改变，这个函数就会运行</span><br><span class="line">    question: function (newQuestion, oldQuestion) &#123;</span><br><span class="line">      this.answer = &apos;Waiting for you to stop typing...&apos;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></p><p>当我们监听的数据发生变化时，相应的函数就会运行，这个函数的第一个参数是变化的值，第二个参数是原来的值</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;计算属性&quot;&gt;&lt;a href=&quot;#计算属性&quot; class=&quot;headerlink&quot; title=&quot;计算属性&quot;&gt;&lt;/a&gt;计算属性&lt;/h3&gt;&lt;h5 id=&quot;理解&quot;&gt;&lt;a href=&quot;#理解&quot; class=&quot;headerlink&quot; title=&quot;理解&quot;&gt;&lt;/a&gt;理解&lt;/h5&gt;&lt;p&gt;1、computed用来监控自己定义的变量，该变量不在data里面声明，直接在computed里面定义，然后就可以在页面上获取到并进行相应的数据处理&lt;/p&gt;
&lt;p&gt;2、computed里可以完成各种复杂的逻辑，包括运算、函数调用等，只要最终返回一个结果就可以。&lt;/p&gt;
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue图片上传</title>
    <link href="http://yoursite.com/2019/05/06/19-05/19-5-6/"/>
    <id>http://yoursite.com/2019/05/06/19-05/19-5-6/</id>
    <published>2019-05-06T05:43:03.000Z</published>
    <updated>2019-05-06T06:00:15.500Z</updated>
    
    <content type="html"><![CDATA[<h3 id="将图片上传功能封装为一个组件（组件）"><a href="#将图片上传功能封装为一个组件（组件）" class="headerlink" title="将图片上传功能封装为一个组件（组件）"></a>将图片上传功能封装为一个组件（<imgupload>组件）</imgupload></h3><p>思路：使用input的file类型来上传图片，然后在利用FileReader读取到文件中的数据。</p><p>FileReader提供了如下方法：<br><img src="/2019/05/06/19-05/19-5-6/blog01.png" alt="zi">)<br><a id="more"></a><br>事件：<br><img src="/2019/05/06/19-05/19-5-6/blog02.png" alt="zi">)</p><h4 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//结构</span><br><span class="line">&lt;template&gt;       </span><br><span class="line">&lt;div class=&quot;upload&quot;&gt;</span><br><span class="line">    &lt;label for=&quot;file&quot;&gt;&lt;img :src=&quot;src&quot; alt=&quot;&quot;&gt;&lt;/label&gt;</span><br><span class="line">    &lt;input type=&quot;file&quot; @change=&quot;getFile&quot; ref=&quot;file&quot; id=&quot;file&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h4 id="图片上传的js"><a href="#图片上传的js" class="headerlink" title="图片上传的js"></a>图片上传的js</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">//js</span><br><span class="line">import logo from &apos;../assets/images/index_logo.png&apos;</span><br><span class="line">export default &#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">     return&#123;</span><br><span class="line">        src:logo</span><br><span class="line">     &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        //base64转为formdata</span><br><span class="line">        dataURItoBlob(dataURI) &#123;</span><br><span class="line">            var byteString = atob(dataURI.split(&apos;,&apos;)[1]);</span><br><span class="line">            var mimeString = dataURI.split(&apos;,&apos;)[0].split(&apos;:&apos;)[1].split(&apos;;&apos;)[0];</span><br><span class="line">            var ab = new ArrayBuffer(byteString.length);</span><br><span class="line">            var ia = new Uint8Array(ab);</span><br><span class="line">            for (var i = 0; i &lt; byteString.length; i++) &#123;</span><br><span class="line">                ia[i] = byteString.charCodeAt(i);</span><br><span class="line">            &#125;</span><br><span class="line">            return new Blob([ab], &#123;type: mimeString&#125;);</span><br><span class="line">        &#125;,</span><br><span class="line">        getFile:function(e)&#123;</span><br><span class="line">            let _this = this</span><br><span class="line">            let value_ = e.target</span><br><span class="line">            let files = e.target.files[0]//获取上传的图片</span><br><span class="line"></span><br><span class="line">            let size_ = 200;//文件限制的大小，单位为kb</span><br><span class="line">            let fileSize = (files.size / 1024).toFixed(0)//文件大小，单位kb</span><br><span class="line">            let fileType = value_.value.substring(value_.value.lastIndexOf(&quot;.&quot;))//文件格式</span><br><span class="line"></span><br><span class="line">            if (!e || !window.FileReader) &#123; return &#125;//是否支持FileReader</span><br><span class="line">            let reader = new FileReader()//new一个FileReader对象</span><br><span class="line">            reader.readAsDataURL(files) //将文件读取为 DataURL</span><br><span class="line">            //判断文件大小</span><br><span class="line">            if (fileSize &gt; size_) &#123;</span><br><span class="line">                alert(&apos;文件过大&apos;)</span><br><span class="line">                return false</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            if (!fileType.match(/.jpg|.jpeg|.gif|.png|.bmp/i)) &#123;</span><br><span class="line">                alert(&apos;请上传正确格式的图片&apos;)</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            reader.onload = function()&#123;//文件读取成功result 属性返回读取的结果</span><br><span class="line">                _this.src = this.result//展示图片</span><br><span class="line">                //将base64转为formdata</span><br><span class="line">                var blob = _this.dataURItoBlob(this.result);</span><br><span class="line">                let format = new FormData()</span><br><span class="line">                format.append(&apos;src&apos;,blob)</span><br><span class="line">                _this.$emit(&apos;getImage&apos;,format)//将路径传出去</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="组件的样式"><a href="#组件的样式" class="headerlink" title="组件的样式"></a>组件的样式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//样式</span><br><span class="line"> @r:2px;</span><br><span class="line">   .upload img&#123;</span><br><span class="line">        display: block;</span><br><span class="line">        width: 108/@r;</span><br><span class="line">        height: 108/@r;</span><br><span class="line">        margin-bottom: 34/@r;</span><br><span class="line">    &#125;</span><br><span class="line">   .upload input &#123;</span><br><span class="line">        display: none;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h3><p>上面将上传功能封装为imgupload组件，下面开始在其他需要的组件内调用</p><p>1、引入组件<br><code>import imgupload from &#39;../common/imgupload&#39;</code><br>2、命名组件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">   components:&#123;imgupload&#125;,//组件名称</span><br><span class="line">   created()&#123;</span><br><span class="line"></span><br><span class="line">   &#125;,</span><br><span class="line">   data()&#123;</span><br><span class="line">       return &#123;</span><br><span class="line">           addMask:true,</span><br><span class="line">           src:logo</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;,</span><br></pre></td></tr></table></figure></p><p>3、调用组件<br>组件间的关系是使用时产生的，在这里使用imgupload组件，所以imgupload组件是子组件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;imgupload @getImage=&apos;getImage&apos;&gt;&lt;/imgupload&gt;</span><br></pre></td></tr></table></figure></p><p>上传的图片需要传给后台，所以imgupload组件需要将图片传出来，这里imgupload组件是子组件，子传父使用事件传值（上面代码中的_this.$emit(‘getImage’,format)将图片传出来）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">methods:&#123;</span><br><span class="line">            </span><br><span class="line">    getImage(imgsrc)&#123;</span><br><span class="line">        //imgsrc是imgupload组件传出来的图片数据</span><br><span class="line">        this.src=imgsrc</span><br><span class="line">        // console.log(src)</span><br><span class="line">        </span><br><span class="line">        console.log(imgsrc.get(&apos;src&apos;),&apos;666&apos;)</span><br><span class="line">        //ajax</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;将图片上传功能封装为一个组件（组件）&quot;&gt;&lt;a href=&quot;#将图片上传功能封装为一个组件（组件）&quot; class=&quot;headerlink&quot; title=&quot;将图片上传功能封装为一个组件（组件）&quot;&gt;&lt;/a&gt;将图片上传功能封装为一个组件（&lt;imgupload&gt;组件）&lt;/imgupload&gt;&lt;/h3&gt;&lt;p&gt;思路：使用input的file类型来上传图片，然后在利用FileReader读取到文件中的数据。&lt;/p&gt;
&lt;p&gt;FileReader提供了如下方法：&lt;br&gt;&lt;img src=&quot;/2019/05/06/19-05/19-5-6/blog01.png&quot; alt=&quot;zi&quot;&gt;)&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>input输入框获取焦点后，底部固定定位的按钮顶起问题</title>
    <link href="http://yoursite.com/2019/04/30/19-04/19-4-30/"/>
    <id>http://yoursite.com/2019/04/30/19-04/19-4-30/</id>
    <published>2019-04-30T01:43:03.000Z</published>
    <updated>2019-04-30T02:02:45.217Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>问题：手机H5页面当input输入框获取焦点时，软键盘会弹起，这时：IOS底部固定定位的按钮不会随着键盘弹起而弹起；而安卓底部固定定位的按钮会跟随软键盘弹起而顶起，从而遮挡一部分视图</p><h3 id="解决方法一、监听window的resize事件，控制显示隐藏"><a href="#解决方法一、监听window的resize事件，控制显示隐藏" class="headerlink" title="解决方法一、监听window的resize事件，控制显示隐藏"></a>解决方法一、监听window的resize事件，控制显示隐藏</h3><p>此方法只对安卓有用，iOS没有监听window的resize事件（iOS的话还是用flex布局比较好）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 获取视图原始高度</span><br><span class="line">let screenHeight = document.body.offsetHeight</span><br><span class="line">// 为window绑定resize事件</span><br><span class="line">window.onresize = function () &#123;</span><br><span class="line">      let changeHeight = document.body.offsetHeight</span><br><span class="line">      if (changeHeight &lt; screenHeight) &#123;</span><br><span class="line">        // 隐藏被弹起的固定定位</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        // 显示</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="解决方法二、flex布局"><a href="#解决方法二、flex布局" class="headerlink" title="解决方法二、flex布局"></a>解决方法二、flex布局</h3><p>将屏幕分为上下两部分，主体为一部分，底部一部分，主体部分设置为flex:1,overflow: scroll;内容在主体内滑动，底部固定不动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">//样式</span><br><span class="line">html,body &#123;</span><br><span class="line">        height: 100%;</span><br><span class="line">        width: 100%;</span><br><span class="line">    &#125;</span><br><span class="line">.container &#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 100%;</span><br><span class="line">    display: flex;</span><br><span class="line">    flex-direction: column;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//需要滑动的主体内容设置为flex:1;overflow: scroll,这样当内容超出时只会在主体内滑动，而不会被底部固定的部分影响</span><br><span class="line">.main &#123;</span><br><span class="line">        flex:1;</span><br><span class="line">        width: 100%;</span><br><span class="line">        background-color:pink;</span><br><span class="line">        overflow: scroll;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">//需要固定不动的部分设置固定的高，</span><br><span class="line">.foot &#123;</span><br><span class="line">    height: 200px;</span><br><span class="line">    width: 100%;</span><br><span class="line">    background-color: #000;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//结构</span><br><span class="line">&lt;div class=&quot;container&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;main&quot;&gt;</span><br><span class="line">        &lt;p&gt;dsadasdsadsadsadasdsadasdsadasdsaddsadasdsadsadsadasdsadasdsadasdsad&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;foot&quot;&gt;</span><br><span class="line">        </span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h3&gt;&lt;p&gt;问题：手机H5页面当input输入框获取焦点时，软键盘会弹起，这时：IOS底部固定定位的按钮不会随着键盘弹起而弹起；而安卓底部固定定位的按钮会跟随软键盘弹起而顶起，从而遮挡一部分视图&lt;/p&gt;
&lt;h3 id=&quot;解决方法一、监听window的resize事件，控制显示隐藏&quot;&gt;&lt;a href=&quot;#解决方法一、监听window的resize事件，控制显示隐藏&quot; class=&quot;headerlink&quot; title=&quot;解决方法一、监听window的resize事件，控制显示隐藏&quot;&gt;&lt;/a&gt;解决方法一、监听window的resize事件，控制显示隐藏&lt;/h3&gt;&lt;p&gt;此方法只对安卓有用，iOS没有监听window的resize事件（iOS的话还是用flex布局比较好）&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// 获取视图原始高度&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let screenHeight = document.body.offsetHeight	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 为window绑定resize事件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;window.onresize = function () &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      let changeHeight = document.body.offsetHeight&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      if (changeHeight &amp;lt; screenHeight) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 隐藏被弹起的固定定位&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 显示&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="css" scheme="http://yoursite.com/categories/css/"/>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>hexo主题上传报错Template render error</title>
    <link href="http://yoursite.com/2019/04/29/19-04/19-4-29/"/>
    <id>http://yoursite.com/2019/04/29/19-04/19-4-29/</id>
    <published>2019-04-29T05:45:03.000Z</published>
    <updated>2019-04-28T05:58:47.029Z</updated>
    
    <content type="html"><![CDATA[<h3 id="模板渲染错误"><a href="#模板渲染错误" class="headerlink" title="模板渲染错误"></a>模板渲染错误</h3><p>出现原因：文章内有一些不能用的字符，导致.md格式文章转换报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">..\source\_posts目录下的文章</span><br></pre></td></tr></table></figure><p>解决方法：解决方案：仔细检查..\source_posts目录下的文章，有没有“{ }”等符号，或者代码没有被放入代码框内</p><p>注意：这里的代码框用多行代码框，单行代码框无效</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; message | filterA | filterB &#125;&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;模板渲染错误&quot;&gt;&lt;a href=&quot;#模板渲染错误&quot; class=&quot;headerlink&quot; title=&quot;模板渲染错误&quot;&gt;&lt;/a&gt;模板渲染错误&lt;/h3&gt;&lt;p&gt;出现原因：文章内有一些不能用的字符，导致.md格式文章转换报错&lt;/p&gt;
&lt;figure class=&quot;hig
      
    
    </summary>
    
      <category term="主题相关" scheme="http://yoursite.com/categories/%E4%B8%BB%E9%A2%98%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="主题相关" scheme="http://yoursite.com/tags/%E4%B8%BB%E9%A2%98%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title>Vue项目执行npm i安装依赖中出现的问题</title>
    <link href="http://yoursite.com/2019/04/28/19-04/19-4-28/"/>
    <id>http://yoursite.com/2019/04/28/19-04/19-4-28/</id>
    <published>2019-04-28T05:45:03.000Z</published>
    <updated>2019-04-28T06:03:49.056Z</updated>
    
    <content type="html"><![CDATA[<h3 id="报错chromedriver"><a href="#报错chromedriver" class="headerlink" title="报错chromedriver"></a>报错chromedriver</h3><p><img src="/2019/04/28/19-04/19-4-28/01.png" alt="zi"></p><p>出现原因：没有安装chromedriver</p><p>解决方法：执行以下命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install chromedriver --chromedriver_cdnurl=http://cdn.npm.taobao.org/dist/chromedriver</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;报错chromedriver&quot;&gt;&lt;a href=&quot;#报错chromedriver&quot; class=&quot;headerlink&quot; title=&quot;报错chromedriver&quot;&gt;&lt;/a&gt;报错chromedriver&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/2019/04/28/
      
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue过滤器 filter</title>
    <link href="http://yoursite.com/2019/04/25/19-04/19-4-25/"/>
    <id>http://yoursite.com/2019/04/25/19-04/19-4-25/</id>
    <published>2019-04-25T02:57:03.000Z</published>
    <updated>2019-04-28T05:31:09.407Z</updated>
    
    <content type="html"><![CDATA[<h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><p>Vue.js 允许你自定义过滤器，可被用于一些常见的文本格式化(比如在123后面加上abc,或者将一些状态值转为具体的描述：state=0显示‘已领取’等)。过滤器可以用在两个地方：双花括号插值和 v-bind 表达式<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 在双花括号中 --&gt;</span><br><span class="line">&#123;&#123; message | capitalize &#125;&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- 在 `v-bind` 中 --&gt;</span><br><span class="line">&lt;div v-bind:id=&quot;rawId | formatId&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="全局过滤器"><a href="#全局过滤器" class="headerlink" title="全局过滤器"></a>全局过滤器</h3><p>在创建 Vue 实例之前全局定义过滤器:</p><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Vue.filter(&apos;capitalize&apos;, function (value) &#123;</span><br><span class="line">if (!value) return &apos;&apos;</span><br><span class="line">value = value.toString()</span><br><span class="line">return value.charAt(0).toUpperCase() + value.slice(1)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">// ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></code></pre><h3 id="组件过滤器（局部）"><a href="#组件过滤器（局部）" class="headerlink" title="组件过滤器（局部）"></a>组件过滤器（局部）</h3><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;status&quot;&gt;&#123;&#123;item.is_verify|prizeState&#125;&#125;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">//filters过滤器是和生命周期是同级的</span><br><span class="line">created()&#123;</span><br><span class="line">        this.getPrizeList()</span><br><span class="line">    &#125;,</span><br><span class="line">filters:&#123;</span><br><span class="line">        prizeState:function(val)&#123;//参数val就是上面的item.is_verify,花括号内的插值会是prizeState中return出来的数据</span><br><span class="line">            if(val==0)&#123;</span><br><span class="line">                return &apos;未使用&apos;</span><br><span class="line">            &#125;</span><br><span class="line">            if(val==1)&#123;</span><br><span class="line">                return &apos;已使用&apos;</span><br><span class="line">            &#125;</span><br><span class="line">            if(val==11)&#123;</span><br><span class="line">                return &apos;未开始&apos;</span><br><span class="line">            &#125;</span><br><span class="line">            if(val==12)&#123;</span><br><span class="line">                return &apos;已过期&apos;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure></code></pre><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><p>1、过滤器函数总接收表达式的值 (之前的操作链的结果) 作为第一个参数。在上述例子中，prizeState 过滤器函数将会收到 item.is_verify 的值作为第一个参数，插值的内容会变为prizeState函数return出去的数据</p><p>如上述例子，如果item.is_verify的值是1，插值就会是‘未使用’</p><p>2、过滤器可以串联<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; message | filterA | filterB &#125;&#125;</span><br></pre></td></tr></table></figure></p><p>上面的这个例子中filterA接收的参数是message，filterB接收的是filterA中return出来的结果</p><p>3、过滤器是 JavaScript 函数，因此可以接收参数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; message | filterA(参1, 参2) &#125;&#125;</span><br></pre></td></tr></table></figure></p><p>如上：filterA 被定义为接收三个参数的过滤器函数，第一个参数是message，剩下两个参数是传到filterA中的两参数</p><h3 id="注意：全局注册时是filter，没有s的。而组件过滤器是filters，是有s的。"><a href="#注意：全局注册时是filter，没有s的。而组件过滤器是filters，是有s的。" class="headerlink" title="注意：全局注册时是filter，没有s的。而组件过滤器是filters，是有s的。"></a>注意：全局注册时是filter，没有s的。而组件过滤器是filters，是有s的。</h3>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;过滤器&quot;&gt;&lt;a href=&quot;#过滤器&quot; class=&quot;headerlink&quot; title=&quot;过滤器&quot;&gt;&lt;/a&gt;过滤器&lt;/h3&gt;&lt;p&gt;Vue.js 允许你自定义过滤器，可被用于一些常见的文本格式化(比如在123后面加上abc,或者将一些状态值转为具体的描述：state=0显示‘已领取’等)。过滤器可以用在两个地方：双花括号插值和 v-bind 表达式&lt;br&gt;    &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;!-- 在双花括号中 --&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&amp;#123; message | capitalize &amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;!-- 在 `v-bind` 中 --&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;div v-bind:id=&amp;quot;rawId | formatId&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue使用axios</title>
    <link href="http://yoursite.com/2019/04/18/19-04/19-4-18-2/"/>
    <id>http://yoursite.com/2019/04/18/19-04/19-4-18-2/</id>
    <published>2019-04-18T07:23:03.000Z</published>
    <updated>2019-04-18T07:42:10.332Z</updated>
    
    <content type="html"><![CDATA[<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p><code>npm install axios --save-dev</code></p><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p><code>import axios from &#39;axios&#39;</code></p><h3 id="将axios绑定给vue成为一个属性-这样可以在任意组件中使用"><a href="#将axios绑定给vue成为一个属性-这样可以在任意组件中使用" class="headerlink" title="将axios绑定给vue成为一个属性,这样可以在任意组件中使用"></a>将axios绑定给vue成为一个属性,这样可以在任意组件中使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//设置axios请求的默认host</span><br><span class="line">//axios.defaults.baseURL = &apos;https://wechat.kayunzh.com&apos;</span><br><span class="line"></span><br><span class="line">//将axios注入到vue原型上</span><br><span class="line">Vue.prototype.$http = axios</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><pre><code>get方式<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">this.$http(&#123;</span><br><span class="line">    method:&apos;get&apos;,</span><br><span class="line">    url:&apos;https://wechat.kayunzh.com/gongzhonghao/Jssdk&apos;,</span><br><span class="line">    params:&#123;</span><br><span class="line">        // 代码需要上传服务器，否则返回为0</span><br><span class="line">        url:location.href.split(&apos;#&apos;)[0],</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).then(res=&gt;&#123;</span><br><span class="line">    this.init(res.data.data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>post方式<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">this.$http(&#123;</span><br><span class="line">    method:&apos;post&apos;,</span><br><span class="line">    url:&apos;https://ssl2.xupengfei.net/wx/web_page/getUserInfoByCode&apos;,</span><br><span class="line">    data:&#123;</span><br><span class="line">        code:geturlcode</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;).then(res=&gt;&#123;</span><br><span class="line">    if(res.data.code==0)&#123;</span><br><span class="line">        this.$store.commit(&apos;hasopenId&apos;,res.data.data)</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>axios 是基于promise的http库，支持promise API，比如常用的异步回调问题<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">this.$http(&#123;</span><br><span class="line">    method:&apos;get&apos;,</span><br><span class="line">    url:&apos;https://wechat.kayunzh.com/gongzhonghao/Jssdk&apos;,</span><br><span class="line">    params:&#123;</span><br><span class="line">        // 代码需要上传服务器，否则返回为0</span><br><span class="line">        url:location.href.split(&apos;#&apos;)[0],</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).then(res=&gt;&#123;</span><br><span class="line">    this.init(res.data.data)</span><br><span class="line">    //请求成功后发送下一个请求</span><br><span class="line">    return this.$http(&#123;</span><br><span class="line">        //发送请求</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;).then(res=&gt;&#123;</span><br><span class="line">    //res是上面请求返回的数据</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;下载&quot;&gt;&lt;a href=&quot;#下载&quot; class=&quot;headerlink&quot; title=&quot;下载&quot;&gt;&lt;/a&gt;下载&lt;/h3&gt;&lt;p&gt;&lt;code&gt;npm install axios --save-dev&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;引用&quot;&gt;&lt;a href=&quot;#引用&quot; class=&quot;headerlink&quot; title=&quot;引用&quot;&gt;&lt;/a&gt;引用&lt;/h3&gt;&lt;p&gt;&lt;code&gt;import axios from &amp;#39;axios&amp;#39;&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;将axios绑定给vue成为一个属性-这样可以在任意组件中使用&quot;&gt;&lt;a href=&quot;#将axios绑定给vue成为一个属性-这样可以在任意组件中使用&quot; class=&quot;headerlink&quot; title=&quot;将axios绑定给vue成为一个属性,这样可以在任意组件中使用&quot;&gt;&lt;/a&gt;将axios绑定给vue成为一个属性,这样可以在任意组件中使用&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//设置axios请求的默认host&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//axios.defaults.baseURL = &amp;apos;https://wechat.kayunzh.com&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//将axios注入到vue原型上&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Vue.prototype.$http = axios&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>截取地址栏url参数</title>
    <link href="http://yoursite.com/2019/04/18/19-04/19-4-18-3/"/>
    <id>http://yoursite.com/2019/04/18/19-04/19-4-18-3/</id>
    <published>2019-04-18T06:43:03.000Z</published>
    <updated>2019-04-18T07:47:33.236Z</updated>
    
    <content type="html"><![CDATA[<h3 id="下面是一个截取url参数的方法"><a href="#下面是一个截取url参数的方法" class="headerlink" title="下面是一个截取url参数的方法"></a>下面是一个截取url参数的方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//参数name就是我们要截取的字段参数,比如我们要截取地址栏问号后面的id，可以直接这样调用getsearch(&apos;id&apos;)</span><br><span class="line">getsearch:function(name)&#123;</span><br><span class="line">    var reg = new RegExp(&quot;(^|&amp;)&quot;+ name +&quot;=([^&amp;]*)(&amp;|$)&quot;);</span><br><span class="line">    var r = window.location.search.substr(1).match(reg);</span><br><span class="line">    if(r!=null)return unescape(r[2]); return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;下面是一个截取url参数的方法&quot;&gt;&lt;a href=&quot;#下面是一个截取url参数的方法&quot; class=&quot;headerlink&quot; title=&quot;下面是一个截取url参数的方法&quot;&gt;&lt;/a&gt;下面是一个截取url参数的方法&lt;/h3&gt;&lt;figure class=&quot;highli
      
    
    </summary>
    
      <category term="web" scheme="http://yoursite.com/categories/web/"/>
    
    
      <category term="web" scheme="http://yoursite.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>移动端的视口设置</title>
    <link href="http://yoursite.com/2019/04/18/19-04/19-4-18/"/>
    <id>http://yoursite.com/2019/04/18/19-04/19-4-18/</id>
    <published>2019-04-18T06:23:03.000Z</published>
    <updated>2019-04-17T07:15:34.515Z</updated>
    
    <content type="html"><![CDATA[<h3 id="视口的设置"><a href="#视口的设置" class="headerlink" title="视口的设置"></a>视口的设置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no&quot; /&gt;</span><br></pre></td></tr></table></figure><p>以上代码常见于移动端设置，他的作用是使网页的宽度自动适应手机屏幕的宽度。</p><p>下面对每个属性的详细说明：</p><table><thead><tr><th style="text-align:left">属性名</th><th style="text-align:center">取值</th><th style="text-align:right">描述</th></tr></thead><tbody><tr><td style="text-align:left">width</td><td style="text-align:center">device-width或正整数</td><td style="text-align:right">定义视口的宽度，单位为像素，一般为device-width：表示宽度为设备屏幕的宽度</td></tr><tr><td style="text-align:left">height</td><td style="text-align:center">device-width或正整数</td><td style="text-align:right">定义视口的高度，单位为像素，一般不用写</td></tr><tr><td style="text-align:left">initial-scale</td><td style="text-align:center">[0.0-10.0]</td><td style="text-align:right">定义初始缩放值，一般设置为1.0</td></tr><tr><td style="text-align:left">minimum-scale</td><td style="text-align:center">[0.0-10.0]</td><td style="text-align:right">定义放大最大比例，它必须小于或等于maximum-scale设置</td></tr><tr><td style="text-align:left">maximum-scale</td><td style="text-align:center">[0.0-10.0]</td><td style="text-align:right">定义缩小最小比例，它必须大于或等于minimum-scale设置</td></tr><tr><td style="text-align:left">user-scalable</td><td style="text-align:center">yes / no</td><td style="text-align:right">定义是否允许用户手动缩放页面，默认值 yes</td></tr></tbody></table><p>注意：</p><p>viewport 标签只对移动端浏览器有效，对 PC 端浏览器是无效的</p><p>当缩放比例为 100% 时，dip 宽度 = CSS 像素宽度 = 理想视口的宽度 = 布局视口的宽度</p><p>单独设置 initial-scale 或 width 都会有兼容性问题，所以设置布局视口为理想视口的最佳方法是同时设置这两个属性</p><p>即使设置了 user-scalable = no，在 Android Chrome 浏览器中也可以强制启用手动缩放</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;视口的设置&quot;&gt;&lt;a href=&quot;#视口的设置&quot; class=&quot;headerlink&quot; title=&quot;视口的设置&quot;&gt;&lt;/a&gt;视口的设置&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;
      
    
    </summary>
    
      <category term="web" scheme="http://yoursite.com/categories/web/"/>
    
    
      <category term="web" scheme="http://yoursite.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>css的视口单位vw、vh的使用</title>
    <link href="http://yoursite.com/2019/04/17/19-04/19-4-17/"/>
    <id>http://yoursite.com/2019/04/17/19-04/19-4-17/</id>
    <published>2019-04-17T06:20:03.000Z</published>
    <updated>2019-04-17T07:49:01.992Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是视口？"><a href="#什么是视口？" class="headerlink" title="什么是视口？"></a>什么是视口？</h3><p>在桌面端，视口指的是在桌面端，指的是浏览器的可视区域；而在移动端，它涉及3个视口：Layout Viewport（布局视口），Visual Viewport（视觉视口），Ideal Viewport（理想视口）。</p><p>视口单位中的“视口”，桌面端指的是浏览器的可视区域；移动端指的就是Viewport中的Layout Viewport。</p><h3 id="视口单位"><a href="#视口单位" class="headerlink" title="视口单位"></a>视口单位</h3><p>根据CSS3规范，视口单位主要包括以下4个：</p><pre><code>1.vw：1vw等于视口宽度的1%。2.vh：1vh等于视口高度的1%。3.vmin：选取vw和vh中最小的那个。4.vmax：选取vw和vh中最大的那个</code></pre><a id="more"></a><h3 id="vh，vw与百分比的区别"><a href="#vh，vw与百分比的区别" class="headerlink" title="vh，vw与百分比的区别"></a>vh，vw与百分比的区别</h3><pre><code>1.% 是相对于父元素的大小设定的比率，vw、vh 是视窗大小决定的。2.vw、vh 优势在于能够直接获取高度，而用 % 在没有设置 body 高度的情况下，是无法正确获得可视区域的高度的3.vmax相对于视口的宽度或高度中较大的那个。其中最大的那个被均分为100单位的vmax。4.vmin相对于视口的宽度或高度中较小的那个。其中最小的那个被均分为100单位的vmin。</code></pre><h3 id="视口单位vw-wh的用处"><a href="#视口单位vw-wh的用处" class="headerlink" title="视口单位vw,wh的用处"></a>视口单位vw,wh的用处</h3><pre><code>1.响应式页面由于vw，vh的特性，他们能够根据窗口大小来自动调节字体大小，这就能很轻松地完成响应式页面的布局2.可以使用vw，vh来实现在页面中响应垂直居中<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.main &#123; </span><br><span class="line">width: 50vw; </span><br><span class="line">height: 50vh; </span><br><span class="line">margin: 25vh auto; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>只要设置margin的上下间距，使之heigit + margin-top +margin-bottom = 100 ，width + margin-left + margin-right = 100 ，就能够响应垂直居中3.模仿bootstrap的栅栏布局bootstrap的特点就是它的栅栏布局，而使用vw，vh就能够轻松实现<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.row1&#123; </span><br><span class="line">    float: left; </span><br><span class="line">    width:50vw;</span><br><span class="line">&#125;</span><br><span class="line">.row1&#123;</span><br><span class="line">    float: left;</span><br><span class="line">    width:25vw;</span><br><span class="line">&#125;</span><br><span class="line">.row1&#123;</span><br><span class="line">    float: left;</span><br><span class="line">    width:25vw;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>只要在一行中所有的列加起来等于100vw就实现响应式布局</code></pre><h3 id="仅使用vw作为CSS单位"><a href="#仅使用vw作为CSS单位" class="headerlink" title="仅使用vw作为CSS单位"></a>仅使用vw作为CSS单位</h3><pre><code>在仅使用 vw 单位作为唯一应用的一种 CSS 单位的这种做法下，我们遵守：1.对于设计稿的尺寸转换为vw单位，我们使用Sass函数编译<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//iPhone 6尺寸作为设计稿基准</span><br><span class="line">$vm_base: 375; </span><br><span class="line">@function vw($px) &#123;</span><br><span class="line">    @return ($px / 375) * 100vw;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>2.无论是文本还是布局高宽、间距等都使用 vw 作为 CSS 单位<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.logo&#123;</span><br><span class="line">    display: block;</span><br><span class="line">    margin: 0 auto;</span><br><span class="line">    width: vm(40); // 宽度</span><br><span class="line">    height: vm(40); // 高度</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h3 id="vmin、vmax-用处"><a href="#vmin、vmax-用处" class="headerlink" title="vmin、vmax 用处"></a>vmin、vmax 用处</h3><pre><code>做移动页面开发时，如果使用 vw、wh 设置字体大小（比如 5vw），在竖屏和横屏状态下显示的字体大小是不一样的。由于 vmin 和 vmax 是当前较小的 vw 和 vh 和当前较大的 vw 和 vh。这里就可以用到 vmin 和 vmax。使得文字大小在横竖屏下保持一致。</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是视口？&quot;&gt;&lt;a href=&quot;#什么是视口？&quot; class=&quot;headerlink&quot; title=&quot;什么是视口？&quot;&gt;&lt;/a&gt;什么是视口？&lt;/h3&gt;&lt;p&gt;在桌面端，视口指的是在桌面端，指的是浏览器的可视区域；而在移动端，它涉及3个视口：Layout Viewport（布局视口），Visual Viewport（视觉视口），Ideal Viewport（理想视口）。&lt;/p&gt;
&lt;p&gt;视口单位中的“视口”，桌面端指的是浏览器的可视区域；移动端指的就是Viewport中的Layout Viewport。&lt;/p&gt;
&lt;h3 id=&quot;视口单位&quot;&gt;&lt;a href=&quot;#视口单位&quot; class=&quot;headerlink&quot; title=&quot;视口单位&quot;&gt;&lt;/a&gt;视口单位&lt;/h3&gt;&lt;p&gt;根据CSS3规范，视口单位主要包括以下4个：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1.vw：1vw等于视口宽度的1%。

2.vh：1vh等于视口高度的1%。

3.vmin：选取vw和vh中最小的那个。

4.vmax：选取vw和vh中最大的那个
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="css" scheme="http://yoursite.com/categories/css/"/>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>小程序swiper组件用箭头控制无法衔接</title>
    <link href="http://yoursite.com/2019/04/10/19-04/19-4-10/"/>
    <id>http://yoursite.com/2019/04/10/19-04/19-4-10/</id>
    <published>2019-04-10T06:23:03.000Z</published>
    <updated>2019-04-10T09:33:33.280Z</updated>
    
    <content type="html"><![CDATA[<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>小程序组件swiper左右滑动，自动轮播时circular衔接效果都是没有问题的，但当我们用左右箭头模拟轮播的时候，衔接效果却失效了，问题出在哪里？<br>我们来看下面一段代码：<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">//wxml</span><br><span class="line"> &lt;view class=&apos;swiperbox&apos;&gt;</span><br><span class="line">    &lt;swiper class=&apos;swiper-content&apos; circular=&quot;true&quot; style=&quot;height:&#123;&#123;Height&#125;&#125;;&quot; current=&apos;&#123;&#123;current&#125;&#125;&apos; circular=&apos;true&apos;</span><br><span class="line">    bindchange=&quot;demo&quot; autoplay=&apos;&#123;&#123;autoplay&#125;&#125;&apos; interval=&quot;&#123;&#123;interval&#125;&#125;&quot;&gt;</span><br><span class="line">    &lt;swiper-item wx:for=&quot;&#123;&#123;swiperData&#125;&#125;&quot; wx:key=&quot;index&quot;&gt;</span><br><span class="line">        &lt;image src=&apos;&#123;&#123;item&#125;&#125;&apos;&gt;&lt;/image&gt;</span><br><span class="line">        &lt;view class=&apos;page&apos;&gt;&#123;&#123;index+1&#125;&#125;/&#123;&#123;swiperData.length&#125;&#125;&lt;/view&gt;</span><br><span class="line">    &lt;/swiper-item&gt;</span><br><span class="line">    &lt;/swiper&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;view class=&apos;bottom&apos;&gt;</span><br><span class="line">    &lt;view class=&apos;btn-left&apos; bindtap=&apos;prev&apos;&gt;&lt;image src=&apos;&#123;&#123;AppImg.pptpageleft&#125;&#125;&apos;&gt;&lt;/image&gt;&lt;/view&gt;</span><br><span class="line">    &lt;view class=&apos;btn-right&apos; bindtap=&apos;next&apos;&gt;&lt;image src=&apos;&#123;&#123;AppImg.pptpageright&#125;&#125;&apos;&gt;&lt;/image&gt;&lt;/view&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line"></span><br><span class="line">//js</span><br><span class="line"> data: &#123;</span><br><span class="line">    AppImg: util.AppImg,</span><br><span class="line">    Height: &apos;530rpx&apos;,</span><br><span class="line">    swiperData:[</span><br><span class="line">      &apos;../img/demo.png&apos;,</span><br><span class="line">      &apos;../img/demo.png&apos;,</span><br><span class="line">      &apos;../img/demo.png&apos;</span><br><span class="line">    ],</span><br><span class="line">    current:0,</span><br><span class="line">    interval: 100,</span><br><span class="line">    autoplay: false,</span><br><span class="line">  &#125;,</span><br><span class="line">//下一页</span><br><span class="line"> next:function()&#123;</span><br><span class="line">    let count = this.data.current</span><br><span class="line">    count = count &lt; (this.data.swiperData.length - 1) ? count + 1 : 0;</span><br><span class="line">    this.setData(&#123;</span><br><span class="line">      current:count</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">//current改变时触发的change事件</span><br><span class="line">  demo:function(e)&#123;</span><br><span class="line">    console.log(e.detail.source)</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></p><h4 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h4><p>上面代码中，滑动时source（来源）打印的是touch，自动轮播时打印的是autoplay，但我们点击下一页时，打印的却是空，那么，我们猜测是swiper组件只内置了滑动与自动轮播的机制，没有点击下一页的机制，<br>当我们用箭头模拟时，swiper无法在内部找到source来源，所以无法衔接滑动了，既然知道了是source的原因，那么我们要考虑的就是如何模拟swiper内部机制了，<br>那如何去模拟呢，这就要从autoplay这个内置属性搞事情了。</p><p>思路：将autoplay默认为false，点击下一页，将autoplay重置为true，检测bindchange事件的source来源，如果是autoplay，就做动态关闭处理将其设置为false，每一变化都将当前的current记录下来（不记录的话点击上一页跳转位置会错乱）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">   AppImg: util.AppImg,</span><br><span class="line">   Height: &apos;530rpx&apos;,</span><br><span class="line">   swiperData:[</span><br><span class="line">     &apos;../img/demo.png&apos;,</span><br><span class="line">     &apos;../img/demo.png&apos;,</span><br><span class="line">     &apos;../img/demo.png&apos;</span><br><span class="line">   ],</span><br><span class="line">   current:0,</span><br><span class="line">   interval: 100,</span><br><span class="line">   autoplay: false,</span><br><span class="line"> &#125;,</span><br><span class="line"> //上一页</span><br><span class="line"> prev:function()&#123;</span><br><span class="line">   let count = this.data.current</span><br><span class="line">   count = count&gt;0?count-1:this.data.swiperData.length-1</span><br><span class="line">   this.setData(&#123;</span><br><span class="line">     current:count</span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;,</span><br><span class="line"> //下一页</span><br><span class="line"> next:function()&#123;</span><br><span class="line">   this.setData(&#123;</span><br><span class="line">     autoplay:true</span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;,</span><br><span class="line"> //当前页current改变时触发的change事件</span><br><span class="line"> demo:function(e)&#123;</span><br><span class="line">   console.log(e.detail.source)</span><br><span class="line">   if(e.detail.source==&apos;autoplay&apos;)&#123;</span><br><span class="line">     this.setData(&#123;</span><br><span class="line">       autoplay:false</span><br><span class="line">     &#125;)</span><br><span class="line">   &#125;</span><br><span class="line">    this.setData(&#123;</span><br><span class="line">     current: e.detail.current//记录下当前的滑块位置</span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h4&gt;&lt;p&gt;小程序组件swiper左右滑动，自动轮播时circular衔接效果都是没有问题的，但当我们用左右箭头模拟轮播的时候，衔接效果却失效了，问题出在哪里？&lt;br&gt;我们来看下面一段代码：&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="小程序" scheme="http://yoursite.com/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="小程序" scheme="http://yoursite.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>vue九宫格抽奖功能</title>
    <link href="http://yoursite.com/2019/04/04/19-04/19-4-4/"/>
    <id>http://yoursite.com/2019/04/04/19-04/19-4-4/</id>
    <published>2019-04-04T07:47:03.000Z</published>
    <updated>2019-04-04T07:59:15.027Z</updated>
    
    <content type="html"><![CDATA[<h3 id="vue九宫格抽奖"><a href="#vue九宫格抽奖" class="headerlink" title="vue九宫格抽奖"></a>vue九宫格抽奖</h3><p>页面结构<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;gift-box&quot;&gt;</span><br><span class="line"> &lt;ul&gt;</span><br><span class="line"> &lt;li :class=&quot;[index==0?&apos;active&apos;:&apos;&apos;]&quot;&gt;一等奖&lt;/li&gt;</span><br><span class="line"> &lt;li :class=&quot;[index==1?&apos;active&apos;:&apos;&apos;]&quot;&gt;二等奖&lt;/li&gt;</span><br><span class="line"> &lt;li :class=&quot;[index==2?&apos;active&apos;:&apos;&apos;]&quot;&gt;三等奖&lt;/li&gt;</span><br><span class="line"> &lt;li :class=&quot;[index==3?&apos;active&apos;:&apos;&apos;]&quot;&gt;四等奖&lt;/li&gt;</span><br><span class="line"> &lt;a :class=&quot;&#123;cur:curshow&#125;&quot; @click=&quot;startRoll&quot;&gt;开始&lt;/a&gt;</span><br><span class="line"> &lt;li :class=&quot;[index==4?&apos;active&apos;:&apos;&apos;]&quot;&gt;五等奖&lt;/li&gt;</span><br><span class="line"> &lt;li :class=&quot;[index==5?&apos;active&apos;:&apos;&apos;]&quot;&gt;六等奖&lt;/li&gt;</span><br><span class="line"> &lt;li :class=&quot;[index==6?&apos;active&apos;:&apos;&apos;]&quot;&gt;七等奖&lt;/li&gt;</span><br><span class="line"> &lt;li :class=&quot;[index==7?&apos;active&apos;:&apos;&apos;]&quot;&gt;八等奖&lt;/li&gt;</span><br><span class="line"> &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>样式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">*&#123;margin:0;padding:0;&#125;</span><br><span class="line">#gift-box&#123;width:310px;height:310px;margin:30px auto;&#125;</span><br><span class="line">ul&#123;width:310px;height:310px;list-style:none;&#125;</span><br><span class="line">ul li,ul a&#123;width:100px;height:100px;border:1px solid #565656;float:left;text-align:center;line-height:100px;&#125;</span><br><span class="line">ul a:hover&#123;cursor:pointer;color:orange;font-size:18px;&#125;</span><br><span class="line">ul .active&#123;background:red;color:#fff;&#125;</span><br><span class="line">.cur &#123;background-color: #ccc;&#125;</span><br></pre></td></tr></table></figure></p><p> 思路：点击开始抽奖，调用转动的方法，如果达到转动次数要求，且转到中奖位置，则停止，否则继续抽奖<br> js<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">data()&#123;</span><br><span class="line">    return&#123;</span><br><span class="line">       index: -1,// 当前转动到哪个位置，起点位置</span><br><span class="line">       count: 8,//总共有多少位置</span><br><span class="line">       timer: 0,//每次转动定时器</span><br><span class="line">       speed: 200,//初始转动速度</span><br><span class="line">       times: 0,// 转动次数</span><br><span class="line">       cycle: 3,//转动基数：至少需要转动多少次再进入抽奖环节</span><br><span class="line">       prize: 5,//中奖位置</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods:&#123;</span><br><span class="line">     // 开始抽奖</span><br><span class="line">       startRoll:function()&#123;</span><br><span class="line">           this.times+=1//转动次数</span><br><span class="line">           this.oneRoll()// 转动过程调用的每一次转动方法，这里是第一次调用初始化</span><br><span class="line">           this.usePrize()</span><br><span class="line">       &#125;,</span><br><span class="line">       // 转动的方法</span><br><span class="line">       oneRoll:function()&#123;</span><br><span class="line">           let index = this.index //当前转动到的位置</span><br><span class="line">           const count = 8 //总共的位置</span><br><span class="line">           index += 1</span><br><span class="line">           if(index &gt;count - 1)&#123;</span><br><span class="line">               index = 0</span><br><span class="line">           &#125;</span><br><span class="line">           this.index = index</span><br><span class="line">       &#125;,</span><br><span class="line">       //判断是否转到中奖位置，如果是，停止，如果不是，继续转动</span><br><span class="line">       usePrize:function()&#123;</span><br><span class="line">           // 判断是否达到转动次数要求且转到的位置是中奖位置</span><br><span class="line">           if(this.times &gt; this.cycle + 10 &amp;&amp; this.prize === this.index) &#123;</span><br><span class="line">               clearTimeout(this.timer) //清除定时器，转动停止</span><br><span class="line">               this.times = 0</span><br><span class="line">               this.giftopen = true //显示开奖界面</span><br><span class="line">               // alert(&apos;恭喜你，中奖了&apos;)</span><br><span class="line">           &#125;else &#123;</span><br><span class="line">               //否则继续转动</span><br><span class="line">               if(this.times&lt;this.cycle)&#123;</span><br><span class="line">                   this.speed-=5</span><br><span class="line">               &#125;</span><br><span class="line">               this.timer = setTimeout(this.startRoll, this.speed)</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;vue九宫格抽奖&quot;&gt;&lt;a href=&quot;#vue九宫格抽奖&quot; class=&quot;headerlink&quot; title=&quot;vue九宫格抽奖&quot;&gt;&lt;/a&gt;vue九宫格抽奖&lt;/h3&gt;&lt;p&gt;页面结构&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue中引入iconfont</title>
    <link href="http://yoursite.com/2019/04/03/19-04/19-4-3/"/>
    <id>http://yoursite.com/2019/04/03/19-04/19-4-3/</id>
    <published>2019-04-03T06:23:03.000Z</published>
    <updated>2019-04-03T06:32:21.262Z</updated>
    
    <content type="html"><![CDATA[<h3 id="vue中引入iconfont"><a href="#vue中引入iconfont" class="headerlink" title="vue中引入iconfont"></a>vue中引入iconfont</h3><ol><li><p>打开 iconFont官网 选择自己喜欢的图标，并且添加购物车</p></li><li><p>将选好的图标下载到本地,并复制到assets目录下</p></li><li><p>在main.js中引入文件中的iconfont.css文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &apos;./assets/iconfont/iconfont.css&apos;</span><br></pre></td></tr></table></figure></li><li><p>然后就可以用啦</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p id=&quot;pp&quot;&gt;&lt;i class=&quot;iconfont icon-tongzhigonggao&quot;&gt;&lt;/i&gt;666&lt;/p&gt;</span><br></pre></td></tr></table></figure></li></ol><p>注意：如果没有下载css-loader依赖包，可能会报如下错误，需要下载一下npm install css-loader –save<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">These relative modules were not found:</span><br><span class="line"></span><br><span class="line">* ./iconfont.eot?t=1554271744964 in ./node_modules/css-loader??ref--6-1!./node_modules/postcss-loader/lib??ref--6-2!./src/assets/iconfont/iconfont.css</span><br><span class="line">* ./iconfont.svg?t=1554271744964 in ./node_modules/css-loader??ref--6-1!./node_modules/postcss-loader/lib??ref--6-2!./src/assets/iconfont/iconfont.css</span><br><span class="line">* ./iconfont.ttf?t=1554271744964 in ./node_modules/css-loader??ref--6-1!./node_modules/postcss-loader/lib??ref--6-2!./src/assets/iconfont/iconfont.css</span><br><span class="line">* ./iconfont.woff?t=1554271744964 in ./node_modules/css-loader??ref--6-1!./node_modules/postcss-loader/lib??ref--6-2!./src/assets/iconfont/iconfont.css</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;vue中引入iconfont&quot;&gt;&lt;a href=&quot;#vue中引入iconfont&quot; class=&quot;headerlink&quot; title=&quot;vue中引入iconfont&quot;&gt;&lt;/a&gt;vue中引入iconfont&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;打开 iconFont官网
      
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>ThinkPHP 解决跨越问题</title>
    <link href="http://yoursite.com/2019/03/29/19-03/2019-3-29/"/>
    <id>http://yoursite.com/2019/03/29/19-03/2019-3-29/</id>
    <published>2019-03-29T10:05:03.000Z</published>
    <updated>2019-03-29T10:16:18.128Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ThinkPHP-解决跨越问题"><a href="#ThinkPHP-解决跨越问题" class="headerlink" title="ThinkPHP 解决跨越问题"></a>ThinkPHP 解决跨越问题</h3><ol><li>首先在 application目录下的tags.php中找到 app_init，并将其修改为下面的样子<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">注册解决跨域的类:</span><br><span class="line">     &apos;app_init&apos;     =&gt; [</span><br><span class="line">        &apos;app\\index\\behavior\\CORS&apos;</span><br><span class="line">    ],</span><br></pre></td></tr></table></figure></li></ol><a id="more"></a><ol start="2"><li>在application-&gt;index目录下新建behavior文件夹-&gt;CORS.php，将下面这段代码复制进去<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/**</span><br><span class="line"> * Created by PhpStorm.</span><br><span class="line"> * User: Gaoy</span><br><span class="line"> * Date: 2017/12/22</span><br><span class="line"> * Time: 16:13</span><br><span class="line"> */</span><br><span class="line">namespace app\index\behavior;</span><br><span class="line"></span><br><span class="line">use think\Response;</span><br><span class="line"></span><br><span class="line">class CORS &#123;</span><br><span class="line"></span><br><span class="line">    public function appInit()&#123;</span><br><span class="line">        header(&apos;Access-Control-Allow-Origin: *&apos;);</span><br><span class="line">        header(&quot;Access-Control-Allow-Headers: token, Origin, X-Requested-With, Content-Type, Accept, Authorization&quot;);</span><br><span class="line">        header(&apos;Access-Control-Allow-Methods: POST,GET,PUT,DELETE&apos;);</span><br><span class="line"></span><br><span class="line">        if(request()-&gt;isOptions())&#123;</span><br><span class="line">            exit();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>╮(╯▽╰)╭ 大工告成，果然还是后台来做跨越简单，jsonp什么的果然弱到爆。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;ThinkPHP-解决跨越问题&quot;&gt;&lt;a href=&quot;#ThinkPHP-解决跨越问题&quot; class=&quot;headerlink&quot; title=&quot;ThinkPHP 解决跨越问题&quot;&gt;&lt;/a&gt;ThinkPHP 解决跨越问题&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;首先在 application目录下的tags.php中找到 app_init，并将其修改为下面的样子&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;注册解决跨域的类:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &amp;apos;app_init&amp;apos;     =&amp;gt; [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;apos;app\\index\\behavior\\CORS&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ],&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://yoursite.com/categories/PHP/"/>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
  </entry>
  
</feed>
